<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2021/12/02/Git/"/>
    <url>/2021/12/02/Git/</url>
    
    <content type="html"><![CDATA[<h2 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h2><ul><li><p>查看所有分支<br><code>git branch -a</code></p></li><li><p>查看远程分支<br><code>git branch -r</code></p></li><li><p>查看本地分支所关联的远程分支<br><code>git branch -vv</code></p></li><li><p>gitk 查看分支情况 会打卡GUI界面<br><code>gitk</code></p></li><li><p>修改上次提交描述<br><code>git commit --amend</code></p></li><li><p>git修改本地和远程分支名称</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Bash">git branch -a <span class="hljs-comment">#查看所有分支</span><br>git branch -r <span class="hljs-comment">#查看远程分支</span><br>git branch -vv <span class="hljs-comment">#查看本地分支所关联的远程分支</span><br>git branch -m old_branch new_branch <span class="hljs-comment"># Rename branch locally</span><br>git push origin :old_branch <span class="hljs-comment"># Delete the old branch</span><br><span class="hljs-comment"># Push the new branch, set local branch to track the new remote</span><br>git push --set-upstream origin new_branch <span class="hljs-comment"># 或者git push -u origin new_branch</span><br><br><span class="hljs-comment"># 注意： 把origin改为自己的名称（一般默认就为origin）</span><br></code></pre></td></tr></table></figure><blockquote><p>参考： <a href="https://blog.csdn.net/zhangxiaoyang0/article/details/82454209">git 修改本地和远程分支名称</a></p></blockquote></li></ul><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><ul><li>.gitignore不生效</li></ul><p><code>git rm -f -r --cached .</code></p><h2 id="feature分支开发，合并时解决冲突-防止污染分支代码或者线上代码"><a href="#feature分支开发，合并时解决冲突-防止污染分支代码或者线上代码" class="headerlink" title="feature分支开发，合并时解决冲突(防止污染分支代码或者线上代码)"></a>feature分支开发，合并时解决冲突(防止污染分支代码或者线上代码)</h2><ul><li><p>fearure分支merge到develop分支冲突</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 本地操作</span><br>git checkout develop<br>git pull <span class="hljs-comment">## 最新代码</span><br><br>git merge feature<br><span class="hljs-comment">## 解决冲突</span><br><span class="hljs-comment">#...</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;ci: 解决冲突&#x27;</span><br>git push<br></code></pre></td></tr></table></figure></li><li><p>feature分支merge到master分支冲突</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 本地操作</span><br>git checkout online<br>git pull <span class="hljs-comment">## 最新代码</span><br><br>git checkout feature <span class="hljs-comment"># 切到开发分支</span><br>git merge master<br><span class="hljs-comment">## 解决冲突</span><br><span class="hljs-comment">#...</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;ci: 解决冲突&#x27;</span><br>git push<br></code></pre></td></tr></table></figure></li></ul><h2 id="git-revert用法"><a href="#git-revert用法" class="headerlink" title="git revert用法"></a>git revert用法</h2><h3 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h3><p>revert 用于线上回滚代码</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>revert可以回滚指定提交，并产生一个新的提交 <code>eg: revert_commit_id</code></li><li>由于revert之后产生了相反的提交，原来的提交会丢失，所以要回复revert的提交，可以把<code>revert_commit_id</code>再次revert</li></ul><h3 id="与reset区别"><a href="#与reset区别" class="headerlink" title="与reset区别"></a>与reset区别</h3><ul><li><input disabled="" type="checkbox"> 待完成</li></ul><blockquote><p>引用资料</p></blockquote><h3 id="实际如何操作"><a href="#实际如何操作" class="headerlink" title="实际如何操作"></a>实际如何操作</h3><h4 id="开发背景"><a href="#开发背景" class="headerlink" title="开发背景"></a>开发背景</h4><h5 id="主要分支"><a href="#主要分支" class="headerlink" title="主要分支"></a>主要分支</h5><ul><li>main (线上主要分支)</li><li>develop (测试分支)</li><li>feature (开发分支)</li></ul><hr><h4 id="情况1：feature分支合并到develop分支"><a href="#情况1：feature分支合并到develop分支" class="headerlink" title="情况1：feature分支合并到develop分支"></a>情况1：feature分支合并到develop分支</h4><ul><li>可以直接在feature上进行bugfix然后重新合并到develop分支</li><li>也可以参考下面的revert方法</li></ul><h4 id="情况2：feature分支合并到了main分支（上线完成）-发现feature分支存在bug需要回滚代码"><a href="#情况2：feature分支合并到了main分支（上线完成）-发现feature分支存在bug需要回滚代码" class="headerlink" title="情况2：feature分支合并到了main分支（上线完成）;发现feature分支存在bug需要回滚代码"></a>情况2：feature分支合并到了main分支（上线完成）;发现feature分支存在bug需要回滚代码</h4><ul><li><p>因为featue分支是通过merge的方式合并到main分支，所以会生成一个新的<code>merge_commit_id</code></p></li><li><p>此时找到该<code>merge_commit_id</code>在gitlab上使用revert功能回退代码</p></li><li><h5 id="新建一个revert分支revert-62021261，再合并到main分支生成一个revert-62021261-merge-commit-id-（代码回滚成功）"><a href="#新建一个revert分支revert-62021261，再合并到main分支生成一个revert-62021261-merge-commit-id-（代码回滚成功）" class="headerlink" title="新建一个revert分支revert-62021261，再合并到main分支生成一个revert_62021261_merge_commit_id （代码回滚成功）"></a>新建一个revert分支<code>revert-62021261</code>，再合并到main分支生成一个<code>revert_62021261_merge_commit_id</code> （代码回滚成功）</h5><ul><li><p>恢复提交</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 切换到main</span><br><br>git checkout main<br>git pull<br><br>git <span class="hljs-built_in">log</span> // 找到revert_62021261_merge_commit_id<br>git revert -m 1 revert_62021261_merge_commit_id <span class="hljs-comment"># 由于是通过新建revert-62021261合并生成的revert提交 需要参数 -m 1 </span><br><span class="hljs-comment"># 中间可能存在冲突，解决玩冲突重新 git add . / git commit -m &#x27;ci: conflict&#x27;</span><br><br><span class="hljs-comment"># 此时已经恢复到merge_commit_id状态</span><br><br>git checkout featue<br><span class="hljs-comment"># fixbug</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;fix: bugfix&#x27;</span><br><br>git chekout main<br>git merge feature // 有冲突解决冲突<br>git push<br></code></pre></td></tr></table></figure></code></pre><blockquote><p>如果是revert的是一个合并节点<code>mgere_commit</code>，该<code>merge_commit</code>就有两个parent, revert时git无法知道是恢复到哪个分支，所以会报错<br><code>git revert -m 1 merge_commit</code><br>1代表当前分支，2代表合并过来的分支</p></blockquote></li></ul></li><li><h5 id="没有创建新的分支，直接生成了revert-commit-id（代码回滚成功）"><a href="#没有创建新的分支，直接生成了revert-commit-id（代码回滚成功）" class="headerlink" title="没有创建新的分支，直接生成了revert_commit_id（代码回滚成功）"></a>没有创建新的分支，直接生成了revert_commit_id（代码回滚成功）</h5><ul><li><p>恢复提交（使用main分支）</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 切换到main</span><br><br>git checkout main<br>git pull<br><br>git <span class="hljs-built_in">log</span> <span class="hljs-comment"># 找到revert_commit_id</span><br>git revert revert_commit_id <span class="hljs-comment"># 相比较生成新分支的megre不需要 -m 1</span><br><span class="hljs-comment"># 中间可能存在冲突，解决玩冲突重新 git add . / git commit -m &#x27;ci: conflict&#x27;</span><br><br><span class="hljs-comment"># 此时已经恢复到merge_commit_id状态</span><br><br>git checkout featue<br><span class="hljs-comment"># fixbug</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;fix: bugfix&#x27;</span><br><br>git chekout main<br>git merge feature <span class="hljs-comment"># 有冲突解决冲突</span><br>git push<br></code></pre></td></tr></table></figure></code></pre></li><li><p>恢复提交（使用feature分支）</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 本地</span><br>git checkout main<br>git pull<br><br>git chekout feature<br>git merge main<br>git <span class="hljs-built_in">log</span> <span class="hljs-comment"># 找到revert_commit_id</span><br><br>git revert revert_commit_id<br><span class="hljs-comment"># 恢复到了原来的状态</span><br><br><span class="hljs-comment"># fixbug</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;fix: bugfix&#x27;</span><br>git push<br><br></code></pre></td></tr></table></figure>再次merge到main分支就可以了</code></pre></li></ul></li><li><h5 id="直接在gitlab操作"><a href="#直接在gitlab操作" class="headerlink" title="直接在gitlab操作"></a>直接在gitlab操作</h5><p>  1.找到<code>merge_commit_id</code>使用revert回滚代码（不要使用新建<code>revert-828929292</code>分支的方式）生成一个先的<code>revert_commit_id</code>（回滚成功)</p><p>  2.要想恢复之前的提交 找到<code>revert_commit_id</code>的提交，使用revert回滚代码（不使用新建<code>revert-12773612</code>分支的方式）生成一个<code>revert_revert_commit_id</code> （恢复成功）</p></li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://juejin.cn/post/6844903647390744589">git如何回滚一次错误的操作</a></li><li><a href="https://juejin.cn/post/6856039543628693517">代码被revert,你pull了master,代码没了,咋找回来?</a></li></ul><h2 id="github多账号配置"><a href="#github多账号配置" class="headerlink" title="github多账号配置"></a>github多账号配置</h2><h3 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="https://blog.csdn.net/q13554515812/article/details/83506172">配置多个Git账号</a></li><li><a href="https://juejin.cn/post/6844903816609923080">工作、开源两不误：Git 多账号管理</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科学上网</title>
    <link href="/2021/12/02/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <url>/2021/12/02/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h2 id="windows服务器搭建ss"><a href="#windows服务器搭建ss" class="headerlink" title="windows服务器搭建ss"></a>windows服务器搭建ss</h2><p>最近朋友买了windows服务器，帮忙搭了个ss</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><p><a href="http://1.73207.com/20191021/%E5%9C%A8windows%E4%B8%8B%E6%90%AD%E5%BB%BAshadowsockspython%E6%9C%8D%E5%8A%A1%E5%99%A8/">在Windows下搭建Shadowsocks(Python)服务器</a></p></li><li><p><a href="https://www.sockscap64.com/forums/topic/%E5%9C%A8windows%E4%B8%8A%E6%90%AD%E5%BB%BA-shadowsocks%E6%9C%8D%E5%8A%A1%E7%AB%AF/">在Windows上搭建 Shadowsocks服务端</a></p></li><li><p><a href="https://www.cnblogs.com/crwy/p/10392502.html">SSR配置：记录所踩过的坑</a></p></li><li><p><a href="https://liqiang.io/post/aes-256-gcm-not-supported-solution-50fd04e3">aes-256-gcm not supported</a></p></li><li><p><a href="https://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&tid=188059">求教如何让ss客户端支持aes-256-gcm加密方式</a></p></li><li><p><a href="https://my.oschina.net/kcw/blog/3195906">censtos 7 安装ss 支持aes-256-gcm 加密协议</a></p></li><li><p><a href="https://github.com/shadowsocks/shadowsocks/tree/master">shadowsocks</a></p></li></ol><h2 id="Ubuntu本地终端-安装shadowsocks"><a href="#Ubuntu本地终端-安装shadowsocks" class="headerlink" title="Ubuntu本地终端 安装shadowsocks"></a>Ubuntu本地终端 安装shadowsocks</h2><h3 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="https://www.freedidi.com/747.html">Ubuntu 安装shadowsocks</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>科学上网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github</title>
    <link href="/2021/12/02/github/"/>
    <url>/2021/12/02/github/</url>
    
    <content type="html"><![CDATA[<h2 id="github在线编辑"><a href="#github在线编辑" class="headerlink" title="github在线编辑"></a><a href="https://github.com/">github</a>在线编辑</h2><div class="note note-primary">            <p><a href="https://github.com/ElemeFE/element">https://github.com/ElemeFE/element</a> 改为 <a href="https://github.dev/ElemeFE/element">https://github.dev/ElemeFE/element</a> 即可在线查看编辑代码</p>          </div><!-- <p class="note note-info">https://github.com/ElemeFE/element 改为 https://github.dev/ElemeFE/element 即可在线查看编辑代码</p> -->]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode小技巧</title>
    <link href="/2021/12/02/vscode%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2021/12/02/vscode%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li><p>折叠展开代码</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># mac下，command + k + 0，折叠所有代码块</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 0是代码折叠级别，同理可以换用1，2，3 等</span></span><br>command + k + 0<br>command + k + 1<br>command + k + j ## 展开所有代码块<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 折叠 光标所在代码块</span></span><br>command + option + [ <br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 展开 光标所在代码块</span></span><br>command + option + ] <br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缠中说禅</title>
    <link href="/2021/12/02/%E7%BC%A0%E4%B8%AD%E8%AF%B4%E7%A6%85/"/>
    <url>/2021/12/02/%E7%BC%A0%E4%B8%AD%E8%AF%B4%E7%A6%85/</url>
    
    <content type="html"><![CDATA[<h3 id="缠中说禅108篇"><a href="#缠中说禅108篇" class="headerlink" title="缠中说禅108篇"></a><a href="https://moyuderen.github.io/chanzhongshuochan">缠中说禅108篇</a></h3>]]></content>
    
    
    <categories>
      
      <category>经济</category>
      
      <category>缠论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>经济</tag>
      
      <tag>缠论</tag>
      
      <tag>缠中说禅</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端面试</title>
    <link href="/2021/12/01/interview/"/>
    <url>/2021/12/01/interview/</url>
    
    <content type="html"><![CDATA[<h2 id="前端面试总结"><a href="#前端面试总结" class="headerlink" title="前端面试总结"></a><a href="https://moyuderen.github.io/interview">前端面试总结</a></h2>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客记录</title>
    <link href="/2021/12/01/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/12/01/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="Hexo官网"><a href="#Hexo官网" class="headerlink" title="Hexo官网"></a><a href="https://hexo.io/zh-cn/">Hexo官网</a></h3><ol><li>按照文档操作即可 (生成一个blog工程)</li></ol><h3 id="github"><a href="#github" class="headerlink" title="github"></a><a href="https://github.com/">github</a></h3><ol><li>注册一个github账号（大家应该人手多个了-。-|||）</li><li>创建一个新的仓库命名为<code>youUserName.github.io</code></li><li>把blog工程和<code>youUserName.github.io</code>远端仓库关联</li></ol><h3 id="github-pages（只有仓库是public状态才能免费使用）"><a href="#github-pages（只有仓库是public状态才能免费使用）" class="headerlink" title="github-pages（只有仓库是public状态才能免费使用）"></a>github-pages（只有仓库是public状态才能免费使用）</h3><ol><li><p>创建一个action</p></li><li><p>新建.github/workflows/build.yml文件，如下：（用于执行action）</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># This is a basic workflow to help you get started with Actions</span><br><br><span class="hljs-attr">name:</span> <span class="hljs-string">build</span><br><br><span class="hljs-comment"># Controls when the workflow will run</span><br><span class="hljs-attr">on:</span><br><span class="hljs-comment"># Triggers the workflow on push or pull request events but only for the blog branch</span><br><span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">blog</span> ]<br><span class="hljs-attr">pull_request:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">blog</span> ]<br><br><span class="hljs-comment"># Allows you to run this workflow manually from the Actions tab</span><br><span class="hljs-attr">workflow_dispatch:</span><br><br><span class="hljs-comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span><br><span class="hljs-attr">jobs:</span><br><span class="hljs-comment"># This workflow contains a single job called &quot;build&quot;</span><br><span class="hljs-attr">build-and-deploy:</span><br>    <span class="hljs-comment"># The type of runner that the job will run on</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-comment"># Steps represent a sequence of tasks that will be executed as part of the job</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">🛎️</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2.3.1</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">and</span> <span class="hljs-string">Build</span> <span class="hljs-string">🔧</span> <span class="hljs-comment"># This example project is built using npm and outputs the result to the &#x27;build&#x27; folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm install</span><br><span class="hljs-string">        npm run build</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">🚀</span><br>        <span class="hljs-comment"># https://github.com/JamesIves/github-pages-deploy-action/tree/dev#using-an-ssh-deploy-key-</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">JamesIves/github-pages-deploy-action@4.1.5</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-comment"># https://github.com/JamesIves/github-pages-deploy-action/discussions/627</span><br>        <span class="hljs-comment"># token: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br>        <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span> <span class="hljs-comment"># The branch the action should deploy to.</span><br>        <span class="hljs-attr">folder:</span> <span class="hljs-string">public</span> <span class="hljs-comment"># The folder the action should deploy.</span><br>        <span class="hljs-attr">commit-message:</span> <span class="hljs-string">docs</span> <span class="hljs-string">更新文档</span> <br>        <span class="hljs-attr">clean:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>执行在blog(或者任意分支)执行action；如图</p><p> <img src="github-actions.png" alt="build"></p></li><li><p>action构建完成会自动生成gh-pages分支，并且把构建结果提交到该分支</p></li><li><p>进入<code>Settings</code>页面，找到<code>Pages</code>选项，完成以下设置</p><p> <img src="github-pages.png" alt="github-pages"><br> 把<code>gh-pages</code>跟目录下的打包结果作为页面展示</p></li><li><p>稍等一会github就可以用<code>https://yourUserName.github.io</code>展示</p></li></ol><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><ol><li><p>购买一个域名（我用的阿里云，买最便宜的域名）</p></li><li><p>设置解析域名如下：</p><p> <img src="domain.png" alt="域名配置"></p><ul><li>A 对应ip是通过  <code>ping yourUserName.github.io</code> 获得的 ipv4</li><li>CNAME  对应 <code>yourUserName.github.io</code></li></ul></li><li><p>进入github <code>yourUserName.github.io</code>工程 <code>Settings</code>页面，找到<code>Pages</code>选项</p><p> <img src="custom-domain.png" alt="custom-domain"></p><ul><li>等待一会就可以在自己的域名访问了</li><li>配置好之后github会在<code>gh-pages</code>分支下自动生成CNAME文件（<code>moyuderen.fun</code>）</li><li>该工程配置好之后，别的工程路由无需配置就可自动访问 eg: <code>https://moyuderen.fun/chanzhongshuochan</code></li></ul></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><h4 id="该博客使用的是fluid主题"><a href="#该博客使用的是fluid主题" class="headerlink" title="该博客使用的是fluid主题"></a>该博客使用的是<a href="https://hexo.fluid-dev.com/docs/">fluid主题</a></h4>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开通博客啦！！！</title>
    <link href="/2021/12/01/%E5%BC%80%E9%80%9A%E5%8D%9A%E5%AE%A2%E5%95%A6%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <url>/2021/12/01/%E5%BC%80%E9%80%9A%E5%8D%9A%E5%AE%A2%E5%95%A6%EF%BC%81%EF%BC%81%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h2 id="开通博客啦"><a href="#开通博客啦" class="headerlink" title="开通博客啦"></a>开通博客啦</h2><h3 id="以后可以在这里记录生活工作中的点点滴滴了，终于有了自己的小空间"><a href="#以后可以在这里记录生活工作中的点点滴滴了，终于有了自己的小空间" class="headerlink" title="以后可以在这里记录生活工作中的点点滴滴了，终于有了自己的小空间"></a>以后可以在这里记录生活工作中的点点滴滴了，终于有了自己的小空间</h3><h3 id="来自于"><a href="#来自于" class="headerlink" title="来自于"></a>来自于</h3><ol><li>使用<a href="https://hexo.io/">Hexo</a>和github-pages搭建</li><li>主题使用<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>主题，</li></ol>]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
