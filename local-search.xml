<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GitLab 在线合并解决冲突后反向合并的问题</title>
    <link href="/2023/05/18/GitLab%E5%9C%A8%E7%BA%BF%E5%90%88%E5%B9%B6%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81%E5%90%8E%E5%8F%8D%E5%90%91%E5%90%88%E5%B9%B6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/05/18/GitLab%E5%9C%A8%E7%BA%BF%E5%90%88%E5%B9%B6%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81%E5%90%8E%E5%8F%8D%E5%90%91%E5%90%88%E5%B9%B6%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>开发项目的时候，使用gitLab合并功能分支feature到test分支上的时候，出现了Conflicts，在线解决冲突之后，点击解决合并，结果反向的把test的分支合并到了feature功能分支!!!</p><h2 id="后果"><a href="#后果" class="headerlink" title="后果"></a>后果</h2><p>导致test分支没有提测的代码合并到了feature分支，分支合并master的时候导致无需上线代码合到master分支，造成线上事故</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>临时分支替代法：分支feature要合并到test分支，且出现了冲突，可以先从feature分支拉一个临时分支feature_temp，用临时分支feature_temp合并到test分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout feature //先切换到feature 分支<br>git checkout -b feature_temp //拉出来新的分支<br>git push origin feature_temp //推送到远端<br>git branch --set-upstream-to=origin/feature_temp <br></code></pre></td></tr></table></figure><p>然后再gitlab界面上面选择feature_temp分支去做合并操作。 点击<code>Resove Conflicts</code>，选择要留下的版本，点击<code>merge</code>合并</p><p>此时test分支合并到了feature_temp分支；<em><strong>同时test分支也就有了feature分支的代码！！！（解决冲突并且完成合并）</strong></em></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><div class="note note-warning">            <p>例子：feature分支要合到test分支，使用<code>Resove Conflicts</code>在线操作，解决冲突，点就<code>merge</code>按钮；<br>实际先执行了<code>Merge branch &#39;test&#39; into &#39;feature&#39;</code>，<br>然后执行了<code>Merge branch &#39;conf2-tmp&#39; into &#39;test&#39;</code>来解决冲突，<br>（所以在test分支的提交记录会看到<code>Merge branch &#39;conf2-tmp&#39; into &#39;test&#39;</code>和<code>Merge branch &#39;test&#39; into &#39;feature&#39;</code>两天提交记录）</p>          </div><div class="note note-danger">            <p>但是在实际操作中test分支直接merge到feature分支会造成feature分支被污染；</p>          </div><div class="note note-success">            <p>所以新建一个feature_tmp分支（来自于feature分支，带着feature分支代码）,执行<code>Resove Conflicts</code>操作来解决冲突合并代码<br>执行了<code>Merge branch &#39;test&#39; into &#39;feature_tmp&#39;</code>, 把test分支合并到feature_tmp<br>再执行了<code>Merge branch &#39;feature_tmp&#39; into &#39;test&#39;</code>来解决冲突，</p><p>此时feature_tmp携带了test分支的代码（受到污染，但是是备份分支则没有关系），test分支也携带了feature_tmp分支的代码，即使feature的代码，间接的完成了冲突解决和合并</p><p>feature分支也没必要在合到test分支，因为test分支已经携带了feature的代码</p>          </div><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p> 回滚补救法：设feature分支要合并到test分支，且出现了冲突，合并完成后，对feature分支做回滚操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> //找到上一个版本的commitID<br>git reset --hard commitID  //强制回退本地分支<br>git push origin HEAD --force 或者 git push -f origin feature //强制回退远程<br></code></pre></td></tr></table></figure><div class="note note-warning">            <ol><li>远程master分支的<code>git push -f origin</code>会推不上去，可能是master分支设置了分支保护，关闭强制push的保护，强行push</li><li><code>git push -f origin</code>操作如果不是自己的featur分支，是测试分支test或者主分支master可能会冲掉别人的代码！！！！</li></ol>          </div><h2 id="正常解决冲突操作方法（local-解决）"><a href="#正常解决冲突操作方法（local-解决）" class="headerlink" title="正常解决冲突操作方法（local 解决）"></a>正常解决冲突操作方法（local 解决）</h2><p>用较为纯净的分支合并到有其他功能分支；如feature分支合并到test分支解决冲突，或者master分支合并到feature分支解决冲突</p><h3 id="如是是feature分支和test分支冲突"><a href="#如是是feature分支和test分支冲突" class="headerlink" title="如是是feature分支和test分支冲突"></a>如是是feature分支和test分支冲突</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本地操作</span><br>git checkout <span class="hljs-built_in">test</span> <span class="hljs-comment"># 切换到test分支</span><br>git pull <span class="hljs-comment"># 拉取最新代码</span><br>git merge feature <span class="hljs-comment"># 将feature分支合并到test分支</span><br><br><span class="hljs-comment"># .</span><br><span class="hljs-comment"># .</span><br><span class="hljs-comment"># 在test分支解决冲突后，执行git add. ; git commit -m &#x27;conflict: 解决冲突&#x27; 提交代码本金代码</span><br><br>git push <span class="hljs-comment"># 把本地test分支推送到代码仓库</span><br></code></pre></td></tr></table></figure><h3 id="如果是feature分支和master分支冲突"><a href="#如果是feature分支和master分支冲突" class="headerlink" title="如果是feature分支和master分支冲突"></a>如果是feature分支和master分支冲突</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 本地操作</span><br>git checkout feature <span class="hljs-comment"># 切换到feature分支</span><br>git pull <span class="hljs-comment"># 拉取最新代码</span><br>git merge master <span class="hljs-comment"># 将master分支合并到feature分支</span><br><br><span class="hljs-comment"># .</span><br><span class="hljs-comment"># .</span><br><span class="hljs-comment"># 在feature分支解决冲突后，执行git add. ; git commit -m &#x27;conflict: 解决冲突&#x27; 提交代码本金代码</span><br><br>git push <span class="hljs-comment"># 把本地feature分支推送到代码仓库</span><br><br><span class="hljs-comment"># 然后再gitlab远端执行merge操作，完成代码合并</span><br></code></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol><li><a href="https://segmentfault.com/a/1190000041546988">巨坑的GitLab在线解决冲突(解决后做了反向合并代码的操作？）</a></li><li><a href="https://blog.51cto.com/u_15072920/4402018">GitLab 在线合并解决冲突后反向合并的问题</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GIT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端对时间utc的处理</title>
    <link href="/2022/08/04/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%AF%B9%E6%97%B6%E9%97%B4utc%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <url>/2022/08/04/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF%E5%AF%B9%E6%97%B6%E9%97%B4utc%E7%9A%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    海外业务在时间上可能会显示当地时间，而后端一般存在库里的是零时区的时间，在前端展示时需要对0时区时间进行处理，展示正确的时间</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Demo1: 后端返回的是时间戳 <code>1658825542000</code></p><p>Demo2: 后端返回的是时间字符串 <code>2022-07-26 08:52:22</code></p><p>demo1和demo2都是0时区的时间（即utc时间）</p><ol><li>转换为固定时区的时间，如尼日利亚 （1时区），北京（8时区）</li><li>转换为页面时区的时间，如尼日利亚 （1时区），北京（8时区）</li></ol><h3 id="dayjs"><a href="#dayjs" class="headerlink" title="dayjs"></a><a href="https://day.js.org/docs/zh-CN/installation/node-js">dayjs</a></h3><blockquote><p>注意：dayjs需要引入<code>utc</code>插件</p><p>如果后端返回的不是常规的时间格式，需要引入<code>customParseFormat</code>去解析时间后再做处理</p></blockquote><ul><li><p><a href="https://day.js.org/docs/zh-CN/manipulate/utc#docsNav">dayjs-utc</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">dayjs().format() <span class="hljs-comment">//2019-03-06T08:00:00+08:00</span><br>dayjs().utc().format() <span class="hljs-comment">// 2019-03-06T00:00:00Z</span><br></code></pre></td></tr></table></figure></li><li><p><a href="https://day.js.org/docs/zh-CN/manipulate/utc-offset">dayjs-offset</a></p><ul><li><p>获取 UTC 偏移量 (分钟)</p></li><li><p>如果输入在-16到16之间，会将您的输入理解为小时数而非分钟。</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入依赖</span><br><span class="hljs-keyword">import</span> dayjs <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;dayjs&quot;</span>;<br><span class="hljs-keyword">const</span> utc = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dayjs/plugin/utc&quot;</span>);<br><span class="hljs-keyword">const</span> customParseFormat = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;dayjs/plugin/customParseFormat&quot;</span>);<br>dayjs.extend(customParseFormat);<br>dayjs.extend(utc);<br><br><span class="hljs-keyword">const</span> timeStamp = <span class="hljs-number">1658825542000</span><br><span class="hljs-keyword">const</span> timeStr = <span class="hljs-string">&#x27;2022-07-26 08:52:22&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 时区枚举</span><br><span class="hljs-keyword">const</span> Timezone = &#123;<br>  <span class="hljs-attr">Nigeria</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">China</span>: <span class="hljs-number">8</span><br>&#125;;<br><br><span class="hljs-comment">// 如果时间格式是时间戳，需要使用dayjs.utc(timeStamp)去处理时间戳</span><br><span class="hljs-comment">// 否则会被解析为当前时间</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">zeroToFixedTimezone1</span>(<span class="hljs-params">timeStamp, timezone, format = <span class="hljs-string">&quot;MMM DD,YYYY HH:mm:ss&quot;</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> dayjs.utc(timeStamp) <span class="hljs-comment">// 注意！！！</span><br>    .add(timezone, <span class="hljs-string">&quot;hour&quot;</span>)<br>    .format(format);<br>&#125;<br><br><span class="hljs-comment">// 如果时间格式是时间字符，使用dayjs.utc(timeStr)和dayjs(timeStr)是一样的结果</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">zeroToFixedTimezone2</span>(<span class="hljs-params">timeStr, timezone, format = <span class="hljs-string">&quot;MMM DD,YYYY HH:mm:ss&quot;</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> dayjs(timeStr) <span class="hljs-comment">// 或者dayjs.utc(timeStr)</span><br>    .add(timezone, <span class="hljs-string">&quot;hour&quot;</span>)<br>    .format(format);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">utcOffsetDate</span>(<span class="hljs-params">date, format = <span class="hljs-string">&quot;MMM DD,YYYY HH:mm:ss&quot;</span></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> utcOffset = dayjs().utcOffset();<br>  <span class="hljs-keyword">return</span> dayjs.utc(date).add(utcOffset, <span class="hljs-string">&quot;m&quot;</span>)<br>    .format(format);<br>&#125;<br><br>zeroToFixedTimezone1(<span class="hljs-number">1658825542000</span>, Timezone.Nigeria) <span class="hljs-comment">// Jul 26,2022 09:52:22</span><br>zeroToFixedTimezone2(<span class="hljs-number">1658825542000</span>, Timezone.Nigeria) <span class="hljs-comment">// Jul 26,2022 17:52:22 //!!!错误用法 北京时间 相当于比0时区大了9个小时，比尼日大了8个小时</span><br>zeroToFixedTimezone2(<span class="hljs-string">&#x27;2022-08-26 08:52:22&#x27;</span>, Timezone.Nigeria) <span class="hljs-comment">// Jul 26,2022 09:52:22</span><br><br>utcOffsetDate(<span class="hljs-number">1658825542000</span>) <span class="hljs-comment">// Jul 26,2022 16:52:22  北京时间 相当于比0时区大了8个小时</span><br>utcOffsetDate(<span class="hljs-string">&#x27;2022-08-26 08:52:22&#x27;</span>) <span class="hljs-comment">// Jul 26,2022 16:52:22 北京时间 相当于比0时区大了8个小时</span><br><br></code></pre></td></tr></table></figure><h3 id="moment"><a href="#moment" class="headerlink" title="moment"></a><a href="http://momentjs.cn/docs/">moment</a></h3><ul><li><p><a href="http://momentjs.cn/docs/#/parsing/utc/">moment-utc</a></p></li><li><p><a href="http://momentjs.cn/docs/#/manipulating/utc-offset/">moment-offset</a></p><p>​    此函数返回 UTC 的实际偏移量，而不是反向偏移量（类似 <code>Date.prototype.getTimezoneOffset</code> 返回的）</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> moment <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;moment&#x27;</span><br><span class="hljs-comment">// 类似dayjs,但是不需要安装插件</span><br><br><span class="hljs-comment">// 时区枚举</span><br><span class="hljs-keyword">const</span> Timezone = &#123;<br>  <span class="hljs-attr">Nigeria</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">China</span>: <span class="hljs-number">8</span><br>&#125;;<br><br><span class="hljs-comment">// 如果时间格式是时间戳，需要使用dayjs.utc(timeStamp)去处理时间戳</span><br><span class="hljs-comment">// 否则会被解析为当前时间</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">zeroToFixedTimezone1</span>(<span class="hljs-params">timeStamp, timezone, format = <span class="hljs-string">&quot;MMM DD,YYYY HH:mm:ss&quot;</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> moment.utc(timeStamp) <span class="hljs-comment">// 注意！！！</span><br>    .add(timezone, <span class="hljs-string">&quot;hour&quot;</span>)<br>    .format(format);<br>&#125;<br><br><span class="hljs-comment">// 如果时间格式是时间字符，使用dayjs.utc(timeStr)和dayjs(timeStr)是一样的结果</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">zeroToFixedTimezone2</span>(<span class="hljs-params">timeStr, timezone, format = <span class="hljs-string">&quot;MMM DD,YYYY HH:mm:ss&quot;</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> moment(timeStr) <span class="hljs-comment">// 或者dayjs.utc(timeStr)</span><br>    .add(timezone, <span class="hljs-string">&quot;hour&quot;</span>)<br>    .format(format);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">utcOffsetDate</span>(<span class="hljs-params">date, format = <span class="hljs-string">&quot;MMM DD,YYYY HH:mm:ss&quot;</span></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> utcOffset = moment().utcOffset();<br>  <span class="hljs-keyword">return</span> moment.utc(date).add(utcOffset, <span class="hljs-string">&quot;m&quot;</span>)<br>    .format(format);<br>&#125;<br><br>zeroToFixedTimezone1(<span class="hljs-number">1658825542000</span>, Timezone.Nigeria) <span class="hljs-comment">// Jul 26,2022 09:52:22</span><br>zeroToFixedTimezone2(<span class="hljs-number">1658825542000</span>, Timezone.Nigeria) <span class="hljs-comment">// Jul 26,2022 17:52:22 //!!!错误用法 北京时间 相当于比0时区大了9个小时，比尼日大了8个小时</span><br>zeroToFixedTimezone2(<span class="hljs-string">&#x27;2022-08-26 08:52:22&#x27;</span>, Timezone.Nigeria) <span class="hljs-comment">// Jul 26,2022 09:52:22</span><br><br>utcOffsetDate(<span class="hljs-number">1658825542000</span>) <span class="hljs-comment">// Jul 26,2022 16:52:22  北京时间 相当于比0时区大了8个小时</span><br>utcOffsetDate(<span class="hljs-string">&#x27;2022-08-26 08:52:22&#x27;</span>) <span class="hljs-comment">// Jul 26,2022 16:52:22 北京时间 相当于比0时区大了8个小时</span><br><br></code></pre></td></tr></table></figure><h3 id="原生js"><a href="#原生js" class="headerlink" title="原生js"></a>原生js</h3><p>反向偏移量<code>Date.prototype.getTimezoneOffset</code>跟 dayjs和moment是相反的</p><p><code>Date.getTimezoneOffset</code>是分钟为单位的</p><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>时间戳： 如果时间格式是时间戳，需要使用<code>dayjs.utc(timeStamp)</code>去处理时间戳</p><p>时间字符串： 如果时间格式是时间字符，使用<code>dayjs.utc(timeStr</code>)和<code>dayjs(timeStr)</code>是一样的结果</p><p><strong>最好的方案</strong>：都使用<code>dayjs.utc(date)</code>去解析时间</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github多账号设置</title>
    <link href="/2022/05/06/Git/github%E5%A4%9A%E8%B4%A6%E5%8F%B7/"/>
    <url>/2022/05/06/Git/github%E5%A4%9A%E8%B4%A6%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="github多账号配置"><a href="#github多账号配置" class="headerlink" title="github多账号配置"></a>github多账号配置</h2><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li>首先进入.ssh目录<br><code>cd ~/.ssh</code></li><li>生成公私钥<br><code>ssh-keygen -t rsa -C &quot;moyuderen&quot;</code></li></ol> <div class="note note-warning">            <p>注意：到这一步时是对私钥进行命名，这里我命名为moyuderen_id_rsa</p>          </div><p> <img src="id_rsa.png" alt="生成公私钥1"></p> <div class="note note-warning">            <p>注意：到这一步时是设置密码，一路回车即可</p>          </div><p> <img src="password.png" alt="生成公私钥 密码"></p> <div class="note note-success">            <p>成功：看到下面的样子就是生成公私钥成功了</p>          </div><p> <img src="id_rsa_success.png" alt="生成公私钥 成功"></p> <div class="note note-info">            <p>使用<code>ls</code>会看到在.ssh目录下多出了 moyuderen_id_rsa和moyuderen_id_rsa.pub 一对公私钥</p>          </div><p> <img src="id_rsa_success2.png" alt="生成公私钥 成功"></p><ol start="3"><li>把moyuderen_id_rsa.pub里面的内容添加到github里即可(相信这一步都会的)</li><li>配置config文件</li></ol><p> 如果在~/.ssh目录下没有config文件，可以使用<code>touch config</code>创建，然后使用<code>vim config</code>编辑config文件（或者使用编辑器编辑）</p> <div class="note note-success">            <p>编辑好的config文件内容</p>          </div><p> <img src="config.png" alt="config"></p> <div class="note note-primary">            <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host    moyuderen <span class="hljs-comment"># 主机别名 拉取代码的时候回用到，默认的是github.com</span><br>HostName    github.com  <span class="hljs-comment"># 真正的地址github.com,gitlab.com,ip地址等 #</span><br>User    moyuderen <span class="hljs-comment"># 用户名</span><br>PreferredAuthentications    publickey <br>IdentityFile    ~/.ssh/moyuderen_id_rsa <span class="hljs-comment"># 另一个账户的私钥</span><br></code></pre></td></tr></table></figure>          </div><ol start="5"><li>因为系统默认只读取id_rsa，为了让ssh识别新的私钥，可以使用ssh-agent手动添加私钥<br><code>ssh-add ~/.ssh/moyuderen_id_rsa</code></li><li>测试连接<br><code>ssh -T git@moyuderen</code></li></ol> <div class="note note-success">            <p>连接成功</p>          </div><p> <img src="test-t.png" alt="连接成功"></p> <div class="note note-warning">            <p>注意：这里正常测试为<code>ssh -T git@github.com</code>;因为我们在config文件中配置了主机名称<code>Host moyuderen</code>所以用moyuderen代替了github.com, 才使用了 <code>ssh -T git@moyuderen</code>进行测试连接</p>          </div><ol start="7"><li>拉取仓库代码进行测试</li></ol><ul><li>原本的操作 <code>git clone git@github.com:moyuderen/git.git</code></li><li>现在操作需要替换为 <code>git clone git@moyuderen:moyuderen/git.git</code>; 和配置的该账号主机名保持一致</li></ul><ol start="8"><li>设置该仓库提交人的信息（否则和全局冲突无法提交）</li></ol><ul><li><code>git config --local user.name yourusename</code></li><li><code>git config --local user.email youremail</code></li></ul><p> 最后修改代码提交试试吧</p><h3 id="常见报错"><a href="#常见报错" class="headerlink" title="常见报错"></a>常见报错</h3><ul><li><p>Git：git clone时报错remote: HTTP Basic: Access denied fatal: Authentication failed for</p><p>  原因：重置了密码或拉取代码时输错密码导致操作失败，但再次登录时未再弹出重新输入密码界面。</p><p>  解决方案：在git控制台输入以下命令，然后git clone 时在弹出的界面正确输入账户名和密码即可。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --system --<span class="hljs-built_in">unset</span> credential.helper<br>git config --global credential.helper store<br></code></pre></td></tr></table></figure></li><li><p>git pull 报错</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">hint: You have divergent branches and need to specify how to reconcile them.<br>hint: You can <span class="hljs-keyword">do</span> so by running one of the following commands sometime before<br>hint: your next pull:<br>hint: <br>hint:   git config pull.rebase <span class="hljs-literal">false</span>  <span class="hljs-comment"># merge</span><br>hint:   git config pull.rebase <span class="hljs-literal">true</span>   <span class="hljs-comment"># rebase</span><br>hint:   git config pull.ff only       <span class="hljs-comment"># fast-forward only</span><br>hint: <br>hint: You can replace <span class="hljs-string">&quot;git config&quot;</span> with <span class="hljs-string">&quot;git config --global&quot;</span> to <span class="hljs-built_in">set</span> a default<br>hint: preference <span class="hljs-keyword">for</span> all repositories. You can also pass --rebase, --no-rebase,<br>hint: or --ff-only on the <span class="hljs-built_in">command</span> line to override the configured default per<br>hint: invocation.<br>fatal: Need to specify how to reconcile divergent branches.<br></code></pre></td></tr></table></figure><p>  解决方案：</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">git fetch<br>git merge remotes<span class="hljs-regexp">/origin/u</span>ploader  <br><span class="hljs-regexp">//</span> 解决冲突<br>git push<br></code></pre></td></tr></table></figure></li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="https://blog.csdn.net/q13554515812/article/details/83506172">配置多个Git账号</a></li><li><a href="https://juejin.cn/post/6844903816609923080">工作、开源两不误：Git 多账号管理</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>picGo免费的图床上传软件</title>
    <link href="/2022/04/14/picGo%E5%85%8D%E8%B4%B9%E7%9A%84%E5%9B%BE%E5%BA%8A%E4%B8%8A%E4%BC%A0%E8%BD%AF%E4%BB%B6/"/>
    <url>/2022/04/14/picGo%E5%85%8D%E8%B4%B9%E7%9A%84%E5%9B%BE%E5%BA%8A%E4%B8%8A%E4%BC%A0%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="picGo"><a href="#picGo" class="headerlink" title="picGo"></a>picGo</h2><ul><li><a href="https://github.com/Molunerfinn/PicGo">picGo github</a></li><li><a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E5%BA%94%E7%94%A8%E6%A6%82%E8%BF%B0">文档</a></li></ul><h2 id="picgo上传工具"><a href="#picgo上传工具" class="headerlink" title="picgo上传工具"></a>picgo上传工具</h2><ul><li><a href="https://github.com/PicGo/PicGo-Core">PicGo-Core</a></li><li><a href="https://picgo.github.io/PicGo-Core-Doc/">PicGo-Core 文档</a></li></ul><h2 id="对picGo的分析"><a href="#对picGo的分析" class="headerlink" title="对picGo的分析"></a>对picGo的分析</h2><ul><li><a href="https://www.jianshu.com/p/980fcf97ddea">Github图床使用</a></li><li><a href="https://docs.github.com/cn/rest/reference/repos#contents">github开发者网站</a></li><li><a href="https://github.com/octokit/core.js#readme">octokit</a> 用js调用接口的sdk</li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>图片上传</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CICD</title>
    <link href="/2022/03/24/%E6%8A%80%E6%9C%AF/CICD/"/>
    <url>/2022/03/24/%E6%8A%80%E6%9C%AF/CICD/</url>
    
    <content type="html"><![CDATA[<h2 id="gitlab的CICD"><a href="#gitlab的CICD" class="headerlink" title="gitlab的CICD"></a>gitlab的CICD</h2><h3 id="创建一个gitlab项目"><a href="#创建一个gitlab项目" class="headerlink" title="创建一个gitlab项目"></a>创建一个gitlab项目</h3><h3 id="gitlab-runner"><a href="#gitlab-runner" class="headerlink" title="gitlab-runner"></a>gitlab-runner</h3><ul><li>使用gitlab提高的的免费runner需要visa卡验证</li><li>使用自己安装的runner: <a href="https://docs.gitlab.com/runner/install/">官方 install gitlab runner</a><ol><li>购买云服务器</li><li>按照官方的安装方式对于不同的系统进行安装</li><li><code>sudo gitlab-runner register</code></li></ol></li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li><p>dpkg: error: requested operation requires superuser privilege</p>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo -<span class="hljs-selector-tag">i</span><br></code></pre></td></tr></table></figure></li><li><p>dpkg:: command not found</p></li><li><p>dpkg-deb: error: ‘gitlab-runner_arm.deb’ is not a Debian format archive<br>dpkg: error processing archive gitlab-runner_arm.deb (–install):<br>dpkg-deb –control subprocess returned error exit status 2<br>Errors were encountered while processing:<br>gitlab-runner_arm.deb</p></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://mp.weixin.qq.com/s/yzIga9tsuLU22kiWPHVrBQ">GitLab CI 打造一条自己的流水线</a></li><li>[用 GitLab CI 进行持续集成](<a href="https://scarletsky.gi/">https://scarletsky.gi</a></li></ul><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><ul><li>dpkg: error: requested operation requires superuser privilegethub.io/2016/07/29/use-gitlab-ci-for-continuous-integration/)</li><li><a href="https://xiangflight.github.io/gitlab-cd-practice/">GitLab CI/CD 实践</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>CICD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CICD</tag>
      
      <tag>部署</tag>
      
      <tag>gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iterm2</title>
    <link href="/2022/03/02/%E6%8A%80%E6%9C%AF/iterm2/"/>
    <url>/2022/03/02/%E6%8A%80%E6%9C%AF/iterm2/</url>
    
    <content type="html"><![CDATA[<h2 id="iterm2配置"><a href="#iterm2配置" class="headerlink" title="iterm2配置"></a>iterm2配置</h2><p><a href="https://lizicai.com/p/oh-my-zsh%E9%85%8D%E7%BD%AE%E5%92%8C%E6%8F%92%E4%BB%B6%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8li.007/">Oh My Zsh配置和插件 终端神器</a></p><p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh官方主题</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>item2</tag>
      
      <tag>命令行</tag>
      
      <tag>终端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chrome 小技巧</title>
    <link href="/2022/03/02/%E6%8A%80%E6%9C%AF/chrome/"/>
    <url>/2022/03/02/%E6%8A%80%E6%9C%AF/chrome/</url>
    
    <content type="html"><![CDATA[<h2 id="chrome的小技巧"><a href="#chrome的小技巧" class="headerlink" title="chrome的小技巧"></a>chrome的小技巧</h2><h3 id="1-谷歌浏览器打开链接，如何不是覆盖当前页面而自动跳转到新标签页"><a href="#1-谷歌浏览器打开链接，如何不是覆盖当前页面而自动跳转到新标签页" class="headerlink" title="1. 谷歌浏览器打开链接，如何不是覆盖当前页面而自动跳转到新标签页?"></a>1. <a href="https://www.google.com.hk/">谷歌浏览器打开链接，如何不是覆盖当前页面而自动跳转到新标签页?</a></h3><p>打开这个页面，在设置中进行设置</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>chrome</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>json editor</title>
    <link href="/2022/01/13/%E6%8A%80%E6%9C%AF/jsoneditor/"/>
    <url>/2022/01/13/%E6%8A%80%E6%9C%AF/jsoneditor/</url>
    
    <content type="html"><![CDATA[<h2 id="json-editor"><a href="#json-editor" class="headerlink" title="json editor"></a>json editor</h2><p>编辑和解析json的工具</p><p>解决平时工作查看接口数据</p><p><a href="https://moyuderen.github.io/json-editor/">在线工具</a> 开箱即用</p><p><a href="https://github.com/moyuderen/json-editor">github地址</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/josdejong/jsoneditor/">jsoneditor</a><br><a href="https://mp.weixin.qq.com/s/DxcMtSBmzPCLLB_O-evx-g">前端: 从零封装一个可实时预览的json编辑器</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>jsoneditor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022，新的篇章!</title>
    <link href="/2022/01/04/%E6%9D%82%E8%AE%B0/2022%E6%96%B0%E7%9A%84%E7%AF%87%E7%AB%A0/"/>
    <url>/2022/01/04/%E6%9D%82%E8%AE%B0/2022%E6%96%B0%E7%9A%84%E7%AF%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="2021总结"><a href="#2021总结" class="headerlink" title="2021总结"></a>2021总结</h2><p>2021年结束的很快，转眼就到了2022年，已经是我来北京的第6个年头了。</p><p>有几个事情还是需要记录一下的</p><ul><li><p>首先是完成了人生中比较重要的是事之一，结婚。5月份我们举办了自己的婚礼，组建了自己的小家庭，希望我们和加人能一起幸福起来。感觉一下子就长大了不少,在家里要尽量的对她多点耐心，多点宽容，多心疼心疼她.</p></li><li><p>事业上是昏昏沉沉，零零散散的尝试面试了几家公司，最后都是石沉大海（在面试的过程中也是总结了一点面试题，面试的差距在哪里？  需要好好反思一下。）</p></li><li><p>工作上比较中庸吧，没能够积极的参与到团队共建项目中，错过了不少好的机会。还是比较遗憾的。</p></li><li><p>不知道为何，在公司待的其实没那么开心，更累的可能是人际关系。 主要的问题应该是自己并不是很擅长交际，这也是后面需要多多加强的</p></li><li><p>自己总是埋头做一些事情，但是从来不缺总结，也不从中吸取经验，应该多抬头看看啊，不能只是埋头。不要成为一个呆子。</p></li></ul><h2 id="2022展望"><a href="#2022展望" class="headerlink" title="2022展望"></a>2022展望</h2><p>最重要的几件事</p><ol><li>涨薪吧 跳槽，其实在这家公司过的没那么开心</li><li>加强一下自己说话的能力</li><li>多关心一下双方父母</li><li>打理自己的金钱，学会理财，无论是<strong>基金</strong>还是<strong>股票</strong>，理财是迟早要学的<br> 一定要实践起来，只是学习理论其实很短浅</li><li>多和朋友交流自己的想法，从中可以提升自己的说话能力，也能表达东西，是个不错的选择</li><li>行动，行动，行动，最大的问题还是想的太多，确总是不去实践</li><li>真的要挑战自己没有尝试的事情了，无论是工作还是生活，不断的挑战自己，突破自己</li><li>要做的事要具体出来，不应该是一个模糊的概念和文字，这样才能有实践的目标，做到量化</li></ol>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac</title>
    <link href="/2021/12/14/%E6%8A%80%E6%9C%AF/Mac/"/>
    <url>/2021/12/14/%E6%8A%80%E6%9C%AF/Mac/</url>
    
    <content type="html"><![CDATA[<h2 id="Mac终端-zsh环境变量配置"><a href="#Mac终端-zsh环境变量配置" class="headerlink" title="Mac终端 zsh环境变量配置"></a>Mac终端 zsh环境变量配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> ~/.bash_profile<br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pnpm</title>
    <link href="/2021/12/14/%E6%8A%80%E6%9C%AF/pnpm/"/>
    <url>/2021/12/14/%E6%8A%80%E6%9C%AF/pnpm/</url>
    
    <content type="html"><![CDATA[<h2 id="Pnpm-最先进的包管理工具？"><a href="#Pnpm-最先进的包管理工具？" class="headerlink" title="Pnpm: 最先进的包管理工具？"></a>Pnpm: 最先进的包管理工具？</h2><p><a href="https://pnpm.io/zh/">pnpm官网</a></p><p><a href="https://zhuanlan.zhihu.com/p/352437367">关于现代包管理器的深度思考——为什么现在我更推荐 pnpm 而不是 npm/yarn?</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>pnpm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>塞尔达传说-荒野之息（呀哈哈篇）</title>
    <link href="/2021/12/07/%E6%B8%B8%E6%88%8F/%E5%A1%9E%E5%B0%94%E8%BE%BE%E4%BC%A0%E8%AF%B4%E8%8D%92%E9%87%8E%E4%B9%8B%E6%81%AF/"/>
    <url>/2021/12/07/%E6%B8%B8%E6%88%8F/%E5%A1%9E%E5%B0%94%E8%BE%BE%E4%BC%A0%E8%AF%B4%E8%8D%92%E9%87%8E%E4%B9%8B%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="攻略收集"><a href="#攻略收集" class="headerlink" title="攻略收集"></a>攻略收集</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=3&id=2065912094&auto=1&height=66"></iframe><h3 id="初始之塔-19个"><a href="#初始之塔-19个" class="headerlink" title="初始之塔 19个"></a>初始之塔 19个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-1.jpg" alt="初始之塔"></p><h3 id="双子山之塔-61个"><a href="#双子山之塔-61个" class="headerlink" title="双子山之塔 61个"></a>双子山之塔 61个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-2.jpg" alt="双子山之塔"></p><h3 id="哈特诺之塔-68个"><a href="#哈特诺之塔-68个" class="headerlink" title="哈特诺之塔 68个"></a>哈特诺之塔 68个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-3.jpg" alt="哈特诺之塔"></p><h3 id="拉聂耳之塔-60个"><a href="#拉聂耳之塔-60个" class="headerlink" title="拉聂耳之塔 60个"></a>拉聂耳之塔 60个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-4.jpg" alt="拉聂耳之塔"></p><h3 id="阿卡莱之塔-58个"><a href="#阿卡莱之塔-58个" class="headerlink" title="阿卡莱之塔 58个"></a>阿卡莱之塔 58个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-5.jpg" alt="阿卡莱之塔"></p><h3 id="费罗尼之塔-56个"><a href="#费罗尼之塔-56个" class="headerlink" title="费罗尼之塔 56个"></a>费罗尼之塔 56个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-6.jpg" alt="费罗尼之塔"></p><h3 id="湖之塔-90个"><a href="#湖之塔-90个" class="headerlink" title="湖之塔 90个"></a>湖之塔 90个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-7.jpg" alt="湖之塔"></p><h3 id="荒野之塔-71个"><a href="#荒野之塔-71个" class="headerlink" title="荒野之塔 71个"></a>荒野之塔 71个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-8.jpg" alt="荒野之塔"></p><h3 id="格鲁德之塔-34个"><a href="#格鲁德之塔-34个" class="headerlink" title="格鲁德之塔 34个"></a>格鲁德之塔 34个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-9.jpg" alt="格鲁德之塔"></p><h3 id="丘陵之塔-80个"><a href="#丘陵之塔-80个" class="headerlink" title="丘陵之塔 80个"></a>丘陵之塔 80个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-10.jpg" alt="丘陵之塔"></p><h3 id="塔邦挞之塔-37个"><a href="#塔邦挞之塔-37个" class="headerlink" title="塔邦挞之塔 37个"></a>塔邦挞之塔 37个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-11.jpg" alt="塔邦挞之塔"></p><h3 id="海布拉之塔-73个"><a href="#海布拉之塔-73个" class="headerlink" title="海布拉之塔 73个"></a>海布拉之塔 73个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-12.jpg" alt="海布拉之塔"></p><h3 id="森林之塔-35个"><a href="#森林之塔-35个" class="headerlink" title="森林之塔 35个"></a>森林之塔 35个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-13.jpg" alt="森林之塔"></p><h3 id="奥尔汀之塔-45个"><a href="#奥尔汀之塔-45个" class="headerlink" title="奥尔汀之塔 45个"></a>奥尔汀之塔 45个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-14.jpg" alt="奥尔汀之塔"></p><h3 id="平原之塔-113个"><a href="#平原之塔-113个" class="headerlink" title="平原之塔 113个"></a>平原之塔 113个</h3><p><img src="https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/yahaha/yahaha-15.jpg" alt="平原之塔"></p><h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><ol><li><p>苹果树，遇到3棵挨着的苹果树的话，让3棵树上的苹果位置相同，每棵树剩下一个苹果。</p></li><li><p>祭祀的小雕像，有的雕像底下有个托盘，把苹果放进去就行。</p></li><li><p>追踪花花，看到一朵白色的花，过去碰它它会消失，在另一个地方出现，继续追踪，记得是5次。</p></li><li><p>数花朵，遇到花朵，有一支的，有2支的，按照顺序去碰，每碰对一次花就会变色，5次。</p></li><li><p>有个地方在悬崖边，悬崖边上有两棵树，需要在山坡上方滑草通过两棵树。</p></li><li><p>石球入坑，路上有的地方有坑，附近的高出有石球的话，推到坑里，也有雪球的。</p></li><li><p>跳入水中，水里有一圈荷叶似的圈圈，从高处跳到圈里。</p></li><li><p>投石入圈，水里有一圈石头，一般在桥上，举起石头投进圈里。</p></li><li><p>射箭盾牌，卡卡利科村的村口大门上，有个类似牌匾的东西，上面已经被射了箭，再射上去一支箭就行。</p></li><li><p>射气球，坚果，找到一个木桩，上面画着一个树叶，站上去，附近空中会出现气球，或者坚果在飞，射中它，不好找的用黄色暂停技能或者红色磁铁技能扫视一下，人不要从木桩上下去，下去之后气球会消失。</p></li><li><p>还是那个木桩，站上去会发射一个光球，再限制时间内到达光球位置即可。</p></li><li><p>还利亚大桥的某个桥墩的边沿，有一支木棍，捡起来是呀哈哈。</p></li><li><p>看到一堆枯草点燃它，有时候是石头，举起来就行。</p></li><li><p>最常见的石圈，向缺石头的方向找，有石头，捡回来放到石圈的位置。</p></li><li><p>有个废弃的训练场，在两个屋子里有石头，捡起附近的石头让两个屋里的石头摆放位置一样就行。</p></li><li><p>类似磁铁的方块阵，用磁铁技能搜索附近的铁块，让两个方块阵的布局一样就行。</p></li><li><p>有的水里有铁球，用磁铁技能把铁球吸起来放到井里，有的是让3个铁球一起放到石柱上。</p></li><li><p>有一个平原的废弃房子周围，有栅栏，骑马跳过几个栅栏就会有呀哈哈。</p></li><li><p>有个地方的路上有射箭的靶子，把它都用弓箭射碎，路是一个圈，大概8/9个靶子。</p></li></ol><h2 id="网上攻略"><a href="#网上攻略" class="headerlink" title="网上攻略"></a>网上攻略</h2><ul><li><a href="https://www.gamersky.com/z/zeldabotw/">游明星空-塞尔达荒野之息专区</a></li><li><a href="https://www.nshome.com.cn/zelda17/203.html">ns之家-900个呀哈哈</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
      <category>塞尔达荒野之息</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Games</tag>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用工具</title>
    <link href="/2021/12/03/%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/12/03/%E5%B7%A5%E5%85%B7/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h2><ul><li><a href="https://www.qingcloud.com/">qingcloud</a></li></ul><h2 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h2><ul><li>图传上传免费<a href="https://github.com/Molunerfinn/PicGo">PicGo</a></li></ul><h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><ul><li><a href="https://tinify.cn/">tinify</a> （大于5m需要付费）</li><li><a href="https://docsmall.com/image-compress">docsmall</a></li></ul><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><ul><li><a href="https://web.umeng.com/main.php?c=site&a=show">友盟</a></li><li>百度</li></ul><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><ul><li><a href="https://valine.js.org/">valine</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费CDN github+jsdelivr</title>
    <link href="/2021/12/03/%E6%8A%80%E6%9C%AF/%E5%85%8D%E8%B4%B9CDN%20github+jsdelivr/"/>
    <url>/2021/12/03/%E6%8A%80%E6%9C%AF/%E5%85%8D%E8%B4%B9CDN%20github+jsdelivr/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>折腾了一晚上 在网上找了神作<strong>塞尔达荒野之息</strong>的高清图片，更换了博客的banner图，放在了博客的静态资源下面</p><p>部署后发现图片很大，加载特别慢</p><p>so, 灵机一动使用了在线压缩工具<a href="https://tinify.cn/">tinify</a>对图片进行压缩（尝试几次发现压缩效果已经不是很明显了，图片依然很大）。内心os: 王德发? 熬不住了先睡了。</p><p>第二天早上来决定使用CDN图片，首先想到的是七牛云，但是七牛云每月10G流量，可是地址只能使用30天（真的是坑）</p><p>接着找了很多，不是需要注册或者实名备案，总之很麻烦。</p><p>最后找到了github+jsdelivr的方案</p><h2 id="如何白嫖CDN"><a href="#如何白嫖CDN" class="headerlink" title="如何白嫖CDN"></a>如何白嫖CDN</h2><h3 id="1-新建一个github仓库。-eg-CDN"><a href="#1-新建一个github仓库。-eg-CDN" class="headerlink" title="1. 新建一个github仓库。 eg:CDN"></a>1. 新建一个github仓库。 eg:CDN</h3><ul><li><p>里面随便上传几个图片，打开图片的目录 eg: <a href="https://github.com/moyuderen/CDN/blob/main/moyuderen/blog/srd-about.png">https://github.com/moyuderen/CDN/blob/main/moyuderen/blog/srd-about.png</a></p></li><li><p>打一个releases包</p>  <div class="note note-warning">            <p>注意：这一步是必须的（在使用tag时是必须的），后面有解析不使用tag时的替换规则</p>          </div></li></ul><h3 id="2-用jsdelivr地址替换github上的地址（releases包的地址）"><a href="#2-用jsdelivr地址替换github上的地址（releases包的地址）" class="headerlink" title="2. 用jsdelivr地址替换github上的地址（releases包的地址）"></a>2. 用jsdelivr地址替换github上的地址（releases包的地址）</h3><ul><li><code>https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/srd-about.png</code><br>替换</li><li><code>https://github.com/moyuderen/CDN/blob/main/moyuderen/blog/srd-about.png</code></li></ul><h3 id="3-原理"><a href="#3-原理" class="headerlink" title="3. 原理"></a>3. 原理</h3><p><code>https://github.com/$&#123;yourUsername&#125;/$&#123;repositoryName&#125;/$&#123;branchName&#125;/$&#123;filePathName&#125;</code></p><p><code>https://cdn.jsdelivr.net/gh/$&#123;yourUsername&#125;/$&#123;repositoryName&#125;[$&#123;@version&#125;]/$&#123;filePathName&#125;</code></p><div class="note note-warning">            <p>备注：<br><code>@version</code>是release包（tag）的名称如@0.0.2或者@latest</p><ol><li>如果没有version参数，默认为@latest。 eg: <code>https://cdn.jsdelivr.net/gh/moyuderen/CDN@0.0.3/moyuderen/blog/srd-about.png</code></li><li>可以用version来区分版本</li></ol>          </div><div class="note note-danger">            <p>重要：每次更新仓库内容，必须重新创建release包（新的tag），最新的资源才能生效（生效有一点点延迟，稍等就可以啦）</p><p>更新：2022.04.14 更新不使用tag的方式如下</p>          </div><h3 id="4-不使用打tag的方式"><a href="#4-不使用打tag的方式" class="headerlink" title="4. 不使用打tag的方式"></a>4. 不使用打tag的方式</h3><h4 id="解析-https-github-com-moyuderen-CDN-blob-main-moyuderen-blog-srd-about-png"><a href="#解析-https-github-com-moyuderen-CDN-blob-main-moyuderen-blog-srd-about-png" class="headerlink" title="解析 https://github.com/moyuderen/CDN/blob/main/moyuderen/blog/srd-about.png"></a>解析 <code>https://github.com/moyuderen/CDN/blob/main/moyuderen/blog/srd-about.png</code></h4><div class="note note-warning">            <p>解析 <code>https://github.com/moyuderen/CDN/blob/main/moyuderen/blog/srd-about.png</code></p><ol><li><code>https://github.com/moyuderen/CDN</code>:  github地址 + username + 仓库名称</li><li><code>blob</code>:  在直接打开git的文件时会地址会自动添加这个地址，表示打开的是二进制文件</li><li><code>main</code>:  仓库的当前分支</li><li><code>/moyuderen/blog/srd-about.png</code>:  参考文件的地址</li></ol>          </div><p>则可替换为 <code>https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/srd-about.png</code></p><div class="note note-warning">            <p>解析 <code>https://cdn.jsdelivr.net/gh/moyuderen/CDN/moyuderen/blog/srd-about.png</code></p><ol><li><code>https://github.com/</code> 被替换为 <code>https://cdn.jsdelivr.net/gh/</code></li><li><code>moyuderen</code> 保持不变</li><li><code>CDN</code> 保持不变</li><li><code>blob</code> 删除二进制的目录</li><li><code>main</code>:  删除分支名称</li><li><code>/moyuderen/blog/srd-about.png</code>:  保持不变</li></ol>          </div><h2 id="自己的图床web工具-github-cdn"><a href="#自己的图床web工具-github-cdn" class="headerlink" title="自己的图床web工具 github-cdn"></a>自己的图床web工具 <a href="https://cdn.moyuderen.fun/">github-cdn</a></h2><ul><li>基于<a href="https://docs.github.com/cn/rest/reference/repos#create-or-update-file-contents">github api</a></li><li>基于<a href="https://github.com/octokit/core.js#readme">octokit</a></li><li>支持github本身的cdn地址和 jsdelivr的cdn地址</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.jsdelivr.com/?docs=gh">jsdelivr官网</a></li><li><a href="https://cloud.tencent.com/developer/article/1847396">Jsdelivr+Github = 免费CDN??</a></li><li><a href="https://renzibei.com/2020/07/12/%E4%BD%BF%E7%94%A8jsdelivr-CDN-%E5%8A%A0%E9%80%9Fhexo%E7%9A%84%E5%9B%BE%E7%89%87%E7%AD%89%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/">自动使用jsdelivr CDN 加速hexo的图片等静态资源加载</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>CDN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冥想</title>
    <link href="/2021/12/02/%E7%81%B5%E9%AD%82%E5%9C%A8%E8%B7%AF%E4%B8%8A/%E5%86%A5%E6%83%B3/"/>
    <url>/2021/12/02/%E7%81%B5%E9%AD%82%E5%9C%A8%E8%B7%AF%E4%B8%8A/%E5%86%A5%E6%83%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="冥想"><a href="#冥想" class="headerlink" title="冥想"></a>冥想</h2><pre><code>谈到冥想，不是很清楚的记得是从哪里接触到这个词语。</code></pre><blockquote><p><a href="https://meditation.cosmosrepair.com/">冥想与大脑维修艺术</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>灵魂在路上</category>
      
    </categories>
    
    
    <tags>
      
      <tag>冥想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些感悟</title>
    <link href="/2021/12/02/%E7%81%B5%E9%AD%82%E5%9C%A8%E8%B7%AF%E4%B8%8A/%E6%84%9F%E6%82%9F/"/>
    <url>/2021/12/02/%E7%81%B5%E9%AD%82%E5%9C%A8%E8%B7%AF%E4%B8%8A/%E6%84%9F%E6%82%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="2021-12-02"><a href="#2021-12-02" class="headerlink" title="2021-12-02"></a>2021-12-02</h2><p>20211202这一天是对称日哦！🙅</p><p>未来的工作模式分布式 远程办公</p><p>刻意练习</p><p>一个人成功的几率很小，要学会合作共赢</p><p>劳逸结合，在周末坚决不看工作相关的工作<br>工作时努力工作，休息时就放松下来</p><p>任务分解</p><p>集中注意力 克服分心的欲望</p><p>工作时间安排散步 来冥想</p><p>不要使用网络来消遣</p><p>碰到需求思考这样做的原因</p><p>接受不可预知事件</p><p>邮件过滤器yi</p><p>冥想休息</p><p>泡沫轴？ ？ ？</p><p>多读书</p><p>立即采取行动！因为你永远不能为成功做好完美的准备。</p><p>离开舒适区</p><p>勇于承担责任 扩大个人范畴</p><p>佛 瑜伽 乔布斯 稻盛</p><p>心灵 本真 利他心里</p><p>心态，内心会决定所处环境（书 心，财富自由之路 都有提及）</p><p>悲观的人往往正确，乐观的人往往成功</p><p>去除无用社交</p><p>勇敢拒绝</p><p>做自己想做的事</p><p>敢于说出自己的真实想法</p><p>追求内心的平静，生活中拥有不顺和浮躁，总会有办法去解决，多一点耐心和努力</p><p>当你做某件事的时候，一旦求快，就表示你再也不关心它，只想去坐别的事情。</p><p>冥想</p><div class="note note-default">            <p>说到冥想，我也不知道是什么接触到这个词语的。应该是在看乔布斯的自传的时候，第一次注意到了这个东西</p>          </div><hr>]]></content>
    
    
    <categories>
      
      <category>灵魂在路上</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思考</tag>
      
      <tag>感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>书单</title>
    <link href="/2021/12/02/%E7%81%B5%E9%AD%82%E5%9C%A8%E8%B7%AF%E4%B8%8A/%E4%B9%A6%E5%8D%95/"/>
    <url>/2021/12/02/%E7%81%B5%E9%AD%82%E5%9C%A8%E8%B7%AF%E4%B8%8A/%E4%B9%A6%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<h2 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h2><h3 id="文学"><a href="#文学" class="headerlink" title="文学"></a>文学</h3><ul><li><input disabled="" type="checkbox"> 百年孤独</li><li><input disabled="" type="checkbox"> 三体</li><li><input disabled="" type="checkbox"> 霍乱时期的爱情</li><li><input disabled="" type="checkbox"> 杀死一只知更鸟</li><li><input disabled="" type="checkbox"> 沉默的大多数（一半）</li><li><input disabled="" type="checkbox"> 夹边沟记事</li><li><input disabled="" type="checkbox"> 月亮与六便士</li><li><input disabled="" type="checkbox"> 未来简史（一半）</li><li><input disabled="" type="checkbox"> 金瓶梅</li><li><input checked="" disabled="" type="checkbox"> 你当像鸟飞往你的山</li><li><input checked="" disabled="" type="checkbox"> 皮囊</li><li><input checked="" disabled="" type="checkbox"> 人间失格</li><li><input checked="" disabled="" type="checkbox"> 失乐园</li><li><input checked="" disabled="" type="checkbox"> 情人</li><li><input checked="" disabled="" type="checkbox"> 暗网</li><li><input checked="" disabled="" type="checkbox"> 白鹿原</li><li><input checked="" disabled="" type="checkbox"> 活着</li><li><input checked="" disabled="" type="checkbox"> 房思琪的初恋乐园</li><li><input checked="" disabled="" type="checkbox"> 爱你就像爱生命</li><li><input checked="" disabled="" type="checkbox"> 黄金时代</li><li><input checked="" disabled="" type="checkbox"> 追风筝的人</li><li><input checked="" disabled="" type="checkbox"> 人类简史</li></ul><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><ul><li><input checked="" disabled="" type="checkbox"> 盗墓笔记</li><li><input disabled="" type="checkbox"> 白夜行（一半）</li></ul><h3 id="人物传记"><a href="#人物传记" class="headerlink" title="人物传记"></a>人物传记</h3><ul><li><input checked="" disabled="" type="checkbox"> 史蒂夫-乔布斯传</li><li><input disabled="" type="checkbox"> 富家美国（一半）</li><li><input disabled="" type="checkbox"> 稻盛和夫的书</li></ul><h3 id="工具书"><a href="#工具书" class="headerlink" title="工具书"></a>工具书</h3><ul><li><input disabled="" type="checkbox"> Code clean</li><li><input checked="" disabled="" type="checkbox"> Deep work</li><li><input disabled="" type="checkbox"> 面向对象分析与设计</li></ul><h3 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h3><ul><li><input disabled="" type="checkbox"> 聪明的投资者</li><li><input disabled="" type="checkbox"> 股票作手回忆录（一半）</li><li><input checked="" disabled="" type="checkbox"> 小狗钱钱</li><li><input checked="" disabled="" type="checkbox"> 穷爸爸富爸爸</li><li><input checked="" disabled="" type="checkbox"> 财务自由之路</li><li><input disabled="" type="checkbox"> 日本蜡烛图技术（一半）</li><li><input disabled="" type="checkbox"> 贫穷的本质</li></ul>]]></content>
    
    
    <categories>
      
      <category>灵魂在路上</category>
      
    </categories>
    
    
    <tags>
      
      <tag>书</tag>
      
      <tag>阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最神奇的数字142857</title>
    <link href="/2021/12/02/%E6%9C%89%E8%B6%A3%E7%9A%84%E4%B8%9C%E8%A5%BF/%E6%9C%80%E7%A5%9E%E5%A5%87%E7%9A%84%E6%95%B0%E5%AD%97142857/"/>
    <url>/2021/12/02/%E6%9C%89%E8%B6%A3%E7%9A%84%E4%B8%9C%E8%A5%BF/%E6%9C%80%E7%A5%9E%E5%A5%87%E7%9A%84%E6%95%B0%E5%AD%97142857/</url>
    
    <content type="html"><![CDATA[<h2 id="142857"><a href="#142857" class="headerlink" title="142857"></a>142857</h2><p>142857，又名走马灯数。它发现于埃及金字塔内，它是一组神奇的数字，它证明一星期有7天，它自我累加一次，就由它的6个数字依顺序轮值一次。到了第7天，它们就放假，由999999去代班，数字越加越大，每超过一星期轮回，每个数字需要分身一次，你不需要计算机，只要知道它的分身方法，就可以知道继续累加的答案，它还有更神奇的地方等待你去发掘！</p><h3 id="规律世界上最神奇的数字是：142857"><a href="#规律世界上最神奇的数字是：142857" class="headerlink" title="规律世界上最神奇的数字是：142857"></a>规律世界上最神奇的数字是：142857</h3><p>（142857=3×3×3×11×13×37）<br>看似平凡的数字，为什么说它最神奇呢？<br>我们把它从1乘到10看看<br>142857 × 1 = 142857<br>142857 × 2 = 285714<br>142857 × 3 = 428571<br>142857 × 4 = 571428<br>142857 × 5 = 714285<br>142857 × 6 = 857142<br>142857 × 7 = 999999<br>142857 × 8 = 1142856<br>142857 × 9 = 1285713<br>142857 × 10 = 1428570<br>规律：1-6同样的数字，只是调换了位置，反复的出现。<br>1-6的结果，横竖都有（142857）没有0369 神奇吧。有点像“数独”不过是没有0369的数独。<br>乘以7我们会惊人的发现是999999,9+9+9+9+9+9=54（5+4=9）<br>而142 + 857 = 999　14 + 28 + 57 = 99　1+4+2+8+5+7=27（2+7=9）<br>最后，我们用142857乘以142857答案是：20408122449<br>20408122449的前五位+上后六位的得数是多少呢？<br>20408 + 122449 = 142857</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://baike.baidu.com/item/142857/1922511">142857-百度百科</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>有趣的东西</category>
      
    </categories>
    
    
    <tags>
      
      <tag>有趣的东西</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chrome插件开发</title>
    <link href="/2021/12/02/%E6%8A%80%E6%9C%AF/chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <url>/2021/12/02/%E6%8A%80%E6%9C%AF/chrome%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h2 id="chrome插件开发"><a href="#chrome插件开发" class="headerlink" title="chrome插件开发"></a>chrome插件开发</h2><p>我曾用vue,vue-cli开发了一个可以操作请求头中的cookie的插件，后面整理后发出整个开发过程</p><h3 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h3><ol><li><a href="https://github.com/bewisse/modheader">ModHeader browser extension</a></li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="https://wizardforcel.gitbooks.io/chrome-doc/content/1.html">Chrome 扩展开发文档</a></li><li><a href="https://juejin.cn/post/6844904077889912839">手把手教你开发一个 chrome 扩展程序</a></li><li><a href="https://juejin.cn/post/6904797929056239630">10分钟入门chrome(谷歌)浏览器插件开发</a></li><li><a href="https://cloud.tencent.com/developer/article/1667242">【干货】Chrome插件(扩展)开发全攻略</a></li><li><a href="https://juejin.cn/post/6955828684594872333">做个Chrome小扩展mock请求从此测试如飞</a></li><li><a href="https://zhuanlan.zhihu.com/p/24189002">用 Chrome 扩展实现修改 ajax 请求的响应</a></li><li><a href="https://developer.chrome.com/docs/extensions/reference/webRequest/#event-onCompleted">chrome API</a></li></ol><h3 id="参考代码仓库"><a href="#参考代码仓库" class="headerlink" title="参考代码仓库"></a>参考代码仓库</h3><ol><li><a href="https://github.com/YGYOOO/ajax-interceptor">ajax-interceptor</a></li><li><a href="https://github.com/wendux/Ajax-hook">Ajax-hook</a></li><li><a href="https://github.com/mockstarjs/mockstar-devtools-extensions">mockstar-devtools-extensions</a></li><li><a href="https://github.com/amibug/nei-chrome-devtools">nei-chrome-devtools</a></li><li><a href="https://github.com/vuejs/devtools">vuejs devtools</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>chrome插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地开发启动https</title>
    <link href="/2021/12/02/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E5%90%AF%E5%8A%A8https/"/>
    <url>/2021/12/02/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E5%90%AF%E5%8A%A8https/</url>
    
    <content type="html"><![CDATA[<h2 id="一、vue-cli-vite等脚手架支持https方式"><a href="#一、vue-cli-vite等脚手架支持https方式" class="headerlink" title="一、vue-cli, vite等脚手架支持https方式"></a>一、<a href="https://cli.vuejs.org/zh/">vue-cli</a>, <a href="https://cn.vitejs.dev/">vite</a>等脚手架支持https方式</h2><h2 id="二、-nginx代理"><a href="#二、-nginx代理" class="headerlink" title="二、 nginx代理"></a>二、 nginx代理</h2><ol><li><p>切到nginx目录</p></li><li><p>自己生成签名<br> <code>openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout ./ssl_certificate/nginx.key -out .ssl_certificate/nginx.crt</code></p> <div class="note note-primary">            <p>如果没有ssl_certificate目录自己创建一个</p>          </div></li><li><p>配置niginx的conf文件</p> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>      <span class="hljs-number">443</span> ssl;<br>    <span class="hljs-attribute">listen</span>      <span class="hljs-number">80</span>;<br>    <span class="hljs-comment"># listen    somename:8080;</span><br>    <span class="hljs-attribute">server_name</span>  你的开发地址-cloud.com;<br>    <br>    <span class="hljs-attribute">ssl_certificate</span>     /usr/local/etc/nginx/ssl_certificate/nginx.crt;<br>    <span class="hljs-attribute">ssl_certificate_key</span>     /usr/local/etc/nginx/ssl_certificate/nginx.key;<br>    <span class="hljs-attribute">ssl_session_timeout</span>     <span class="hljs-number">5m</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span>     ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;<br>    <span class="hljs-attribute">ssl_protocols</span>   TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span>   <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:7777;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>重新加载nginx配置</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nginx -t<br>nginx -s reload<br></code></pre></td></tr></table></figure></li><li><p>配置host转发-可使用<a href="https://github.com/oldj/SwitchHosts/blob/master/README_cn.md">SwitchHosts</a>工具</p><p> <code>127.0.0.0.1 你的开发地址-cloud.com</code></p></li><li><p>出现是私密连接，表示chrome认为签名是自己伪造</p> <div class="note note-default">            <p>临时解决方案，在该页面盲写输入 <code>thisisunsafe</code></p>          </div></li><li><p>如果出现<code>net::ERR_CONTENT_LENGTH_MISMATCH 200 (OK)</code>， 表示无权限，使用<code>sudo niginx</code> 重新启动nginx</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>开发</tag>
      
      <tag>https</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx</title>
    <link href="/2021/12/02/%E6%8A%80%E6%9C%AF/nginx/"/>
    <url>/2021/12/02/%E6%8A%80%E6%9C%AF/nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="nginx基本操作"><a href="#nginx基本操作" class="headerlink" title="nginx基本操作"></a>nginx基本操作</h2><ol><li><p>nginx目录（mac系统）<br> <code>cd /usr/local/etc/nginx</code></p></li><li><p>查看启动的nginx<br> <code>ps -ef | grep nginx</code></p></li><li><p>启动nginx<br> <code>nginx</code><br> 没有任何输出代表启动成功（无输出就是最好的）</p></li><li><p>检查nginx配置<br> <code>nginx -t</code></p></li><li><p>nginx重新加载配置<br> <code>nginx -s reload</code></p></li><li><p>退出nginx<br> <code>nginx -s qiut</code></p></li><li><p>停止nginx<br> <code>nginx -s stop</code></p></li><li><p>重启nginx<br> <code>nginx -s restart</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抓包工具</title>
    <link href="/2021/12/02/%E6%8A%80%E6%9C%AF/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/12/02/%E6%8A%80%E6%9C%AF/%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍几种常用的抓包工具"><a href="#介绍几种常用的抓包工具" class="headerlink" title="介绍几种常用的抓包工具"></a>介绍几种常用的抓包工具</h2><h3 id="一、-Charles-中文名青花瓷，最常用的抓包工具"><a href="#一、-Charles-中文名青花瓷，最常用的抓包工具" class="headerlink" title="一、 Charles,中文名青花瓷，最常用的抓包工具"></a>一、 Charles,中文名青花瓷，最常用的抓包工具</h3><h3 id="二、-whistle-工作中经常用到"><a href="#二、-whistle-工作中经常用到" class="headerlink" title="二、 whistle 工作中经常用到"></a>二、 whistle 工作中经常用到</h3><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://juejin.cn/post/7077385311642189832">Whistle 开发调试最佳实践</a></li></ul><h4 id="1-whistle文档"><a href="#1-whistle文档" class="headerlink" title="1. whistle文档"></a>1. <a href="https://wproxy.org/whistle/questions.html">whistle文档</a></h4><h4 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h4><pre><code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装whistle</span><br>npm install -g whistle<br><br><span class="hljs-comment"># 帮助</span><br>w2 <span class="hljs-built_in">help</span><br><br><span class="hljs-comment"># 启动</span><br>w2 start<br><br><span class="hljs-comment"># 重启</span><br>w2 restart<br><br><span class="hljs-comment"># 停止</span><br>w2 stop<br></code></pre></td></tr></table></figure></code></pre><h4 id="3-代理调试"><a href="#3-代理调试" class="headerlink" title="3. 代理调试"></a>3. 代理调试</h4><ul><li><p>安装<a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">SwitchyOmega</a></p></li><li><p>新增情景模式 whistle(名字随意取一个)如图</p>  <div class="note note-warning">            <p>注意：whistle启动的默认端口为8899</p>          </div></li></ul><p><img src="SwitchyOmega.png" alt="新增情景模式"></p><p>此时在chrome插件栏SwitchyOmega看到whistle情景模式代表配置成功。</p><div class="note note-warning">            <p>注意：可以直接使用whistle情景模式或者使用auto switch模式（指定域名是用whistle）</p>          </div><div align="center">    <img src=SwitchyOmega-popup.png height=400 title='SwitchyOmega'/></div><ul><li>电脑安装证书</li></ul><ol><li>在终端启动whistle <code>ws start</code></li><li>访问<a href="http://local.whistlejs.com/">http://local.whistlejs.com/</a></li><li>找到https选项打开会有<code>Download RootCA</code>的链接，下载并信任即可（勾选<code>Capture TUNNEL CONNECTs</code>才可抓取到https的请求）</li></ol><div align="center">    <img src=root-ca.png height=400 title='SwitchyOmega'/></div><ul><li>手机安装证书（通电脑）最后扫码安装即可</li></ul><h4 id="4-具体使用"><a href="#4-具体使用" class="headerlink" title="4. 具体使用"></a>4. 具体使用</h4><ul><li><p>在network中可以看到抓到的接口</p></li><li><p>在rules中新增tab并加入你要代理的端口和域名</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 把http://127.0.0.1:8886代理到https://moyuderen.cloud.com</span><br>https://moyuderen.cloud.com http://127.0.0.1:8886<br></code></pre></td></tr></table></figure></li><li><p>插入js,html等文件，已html为例，在values里添加一个tab(vconsole前端调试神器)</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">&#123;vconsole&#125;<br><br>&lt;script src=<span class="hljs-string">&quot;https://unpkg.com/vconsole@latest/dist/vconsole.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>// VConsole 默认会挂载到 `window.VConsole` 上<br>var vConsole = new window.VConsole();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>  在rules中添加</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># preview环境注入vconsolo代码</span><br>https://moyuderen.preview.com  html://&#123;vconsole&#125;<br><br><span class="hljs-comment"># 线上环境注入vconsolo代码</span><br>https://moyuderen.apps.com html://&#123;vconsole&#125;<br><br><span class="hljs-comment">## 接口500调试</span><br>https://moyuderen.api-preview.com statusCode://500<br><br><span class="hljs-comment">## 插入本地文件</span><br>www.ifeng.com html:///User/xxx/<span class="hljs-built_in">test</span>/test.html<br>www.ifeng.com js:///User/xxx/<span class="hljs-built_in">test</span>/test.js<br>www.ifeng.com css:///User/xxx/<span class="hljs-built_in">test</span>/test.css<br></code></pre></td></tr></table></figure></li></ul><h3 id="三、-spy-debugger"><a href="#三、-spy-debugger" class="headerlink" title="三、 spy-debugger"></a>三、 spy-debugger</h3><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><p><code>npm install spy-debugger -g</code></p><h4 id="2-启动"><a href="#2-启动" class="headerlink" title="2. 启动"></a>2. 启动</h4><p>(默认端口：9888)<br><code>spy-debugger -p 8888</code></p><h4 id="3-其他操作"><a href="#3-其他操作" class="headerlink" title="3. 其他操作"></a>3. 其他操作</h4><ul><li><p>设置外部代理（默认使用AnyProxy）<br>  <code>spy-debugger -e &lt;http://127.0.0.1:8888&gt;</code><br>  spy-debugger内置AnyProxy提供抓包功能，但是也可通过设置外部代理和其它抓包代理工具一起使用，如：Charles、Fiddler。</p></li><li><p>设置页面内容为可编辑模式</p><p>  该功能使页面内容修改更加直观方便。 (默认： false)<br>  <code>spy-debugger -w true</code><br>  内部实现原理：在需要调试的页面内注入代码：document.body.contentEditable=true。暂不支持使用了iscroll框架的页面。</p></li><li><p>是否允许weinre监控iframe加载的页面</p><p>  (默认： false)<br>  <code>spy-debugger -i true</code></p></li><li><p>是否只拦截浏览器发起的https请求</p><p>  (默认： true)<br>  <code>spy-debugger -b false</code><br>  有些浏览器发出的connect请求没有正确的携带userAgent，这个判断有时候会出错，如UC浏览器。这个时候需要设置为false。大多数情况建议启用默认配置：true，由于目前大量App应用自身（非WebView）发出的请求会使用到SSL pinning技术，自定义的证书将不能通过app的证书校验。</p></li><li><p>是否允许HTTP缓存</p><p>  (默认： false)<br>  <code>spy-debugger -c true</code></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>工具</tag>
      
      <tag>抓包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git cherry pick</title>
    <link href="/2021/12/02/Git/git%20cherry%20pick/"/>
    <url>/2021/12/02/Git/git%20cherry%20pick/</url>
    
    <content type="html"><![CDATA[<h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry pick"></a>git cherry pick</h2><p>如果你在使用 git 进行多人协作的代码管理，合并代码（ git merge ）的操作你一定不陌生。 git merge 会将指定分支的所有提交历史合并到当前所在的分支，它的合并单位是“分支”。但有的时候，我只想取某个分支的某几个提交的内容来合并。</p><p>遇到这种操作需求，我们可以使用 cherry-pick 命令，它是以“提交”为单位的合并，可以帮助你安全快速地达到目的。</p><h3 id="cherry-pick-命令官方介绍"><a href="#cherry-pick-命令官方介绍" class="headerlink" title="cherry-pick 命令官方介绍"></a>cherry-pick 命令官方介绍</h3><p>git-cherry-pick 它可以在当前分支应用其他已经存在的 commit 修改，并对每一个合并过来的 commit 产生一个新的提交记录（commit hash）。</p><p>cherry-pick - Given one or more existing commits, apply the change each one introduces, recording a new commit for each.</p><h3 id="cherry-pick-的使用"><a href="#cherry-pick-的使用" class="headerlink" title="cherry-pick 的使用"></a>cherry-pick 的使用</h3><ol><li><p>基本命令<br> 指定任何本地分支上的某个存在的提交</p><p> <code>git cherry-pick &lt;commitHash&gt;</code><br> 例如代码仓库有两个分支 dev 和 feat：</p> <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><br><span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">c</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">d</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">e</span>   <span class="hljs-selector-id">#dev</span><br>    \<br>    <span class="hljs-selector-tag">f</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">g</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">h</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">i</span>  <span class="hljs-selector-id">#feat</span><br></code></pre></td></tr></table></figure><p> 现在要将 feat 分支上的提交 g 应用到 dev 分支：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git checkout dev<br>git cherry-pick g<br></code></pre></td></tr></table></figure><p> 代码库的结构将变成：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">a - b - c - d - e - g‘  <span class="hljs-comment">#dev</span><br>    \<br>    f - g - h - i  <span class="hljs-comment">#feat</span><br></code></pre></td></tr></table></figure><p> dev 分支后面将会增加一个提交 g’，这个提交的 commit 信息跟 feat 分支的 g 提交默认是一样的（你可以在提交过程中用 -m 选项追加内容，或者在处理冲突之后在 –continue 的时候修改，不过大部分时候，使用默认的就可以），但是会产生一个新的 commitHash。</p></li><li><p>转移多个提交</p><ul><li><p>多个不连续的提交，提交之间用空格相隔<br>  <code>git cherry-pick &lt;commitHash1&gt; &lt;commitHash2&gt;</code></p></li><li><p>连续的提交（左开右闭），使用..注意中间没有任何空格<br>  <code>git cherry-pick &lt;start-commitHash&gt;..&lt;end-commitHash&gt;</code></p></li><li><p>连续的提交（左闭右闭）给第一个提交右侧加上^符号</p><p>  <code>git cherry-pick &lt;start-commitHash&gt;^..&lt;end-commitHash&gt;</code><br>  注：连续的提交命令中，start-commitHash 一定要是 end-commitHash 之前的提交，否则命令将会失败，但不会报错。</p></li></ul></li><li><p>转移最顶端的提交</p><p> <code>git cherry-pick &lt;branchName&gt;</code><br> 会将指定分支的最后一次提交应用到当前分支。</p></li><li><p>转移另一个代码库的提交<br> 其实 cherry-pick 的奥义就是，只要是在一个.git仓库管理下的本地代码，任何提交都可以被应用到任何可访问的本地分支，哪怕是跨代码库：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">git remote add repo2 git@xxx.git <span class="hljs-comment"># 添加另一个代码库</span><br>git fetch repo2 <span class="hljs-comment"># 抓取新代码库到本地</span><br>git <span class="hljs-built_in">log</span> repo2/master <span class="hljs-comment"># 查看新代码库master分支的提交记录</span><br>git cherry-pick &lt;commitHashInRepo2&gt; <span class="hljs-comment"># 将新的代码库的某个提交应用到当前分支（跨代码库的合并）</span><br></code></pre></td></tr></table></figure></li><li><p>冲突处理<br> 如果在cherry-pick的过程中，代码产生了冲突，cherry-pick 会停下来，等待我们的下一步操作决策。</p><p> 处理冲突。我们可以先将代码冲突在编辑器中处理好，然后回到命令行，使用 –countinue 参数让 cherry-pick 过程继续执行：<br> <code>git cherry-pick --countinue</code></p><p> 放弃合并，代码回到操作前的样子<br> <code>git cherry-pick --abort</code></p><p> 退出cherry-pick，但是代码不回到操作前的样子<br> <code>git cheerry-pick --quit</code></p></li><li><p>cherry-pick 的一些常用配置项</p><p> -n, –no-commit<br> 只更新工作区和暂存区。不产生新的提交</p><p> -x<br> 在提交信息末尾追加一行（cherry picked from commit…）方便以后查到这个提交是如何产生的。</p><p> -m parent-number, –mainline parent-number<br> 如果原始分支是一个合并节点，那么 cherry-pick 默认会失败，因为不知道应该采用哪个分支的代码变动。 -m 配置项告诉 git 应该采用哪个分支分变动，parent-number 代表原始提交的父分支编号。</p><p> <code>git cherry-pick -m 1 &lt;commitHash&gt;</code><br> 一般1号父分支是接受变动分支（the branch being merged into），2号父分支是作为变动来源的分支（the branch being merged from)。</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://champyin.com/2021/05/23/Git%E4%B9%8Bcherry-pick/">Git之cherry-pick</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git revert</title>
    <link href="/2021/12/02/Git/git%20revert/"/>
    <url>/2021/12/02/Git/git%20revert/</url>
    
    <content type="html"><![CDATA[<h2 id="git-revert用法"><a href="#git-revert用法" class="headerlink" title="git revert用法"></a>git revert用法</h2><h3 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h3><p>revert 用于线上回滚代码</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>revert可以回滚指定提交，并产生一个新的提交 <code>eg: revert_commit_id</code></li><li>由于revert之后产生了相反的提交，原来的提交会丢失，所以要回复revert的提交，可以把<code>revert_commit_id</code>再次revert</li></ul><h3 id="与reset区别"><a href="#与reset区别" class="headerlink" title="与reset区别"></a>与reset区别</h3><ul><li><input disabled="" type="checkbox"> 待完成</li></ul><blockquote><p>引用资料</p></blockquote><h3 id="实际如何操作"><a href="#实际如何操作" class="headerlink" title="实际如何操作"></a>实际如何操作</h3><h4 id="开发背景"><a href="#开发背景" class="headerlink" title="开发背景"></a>开发背景</h4><h5 id="主要分支"><a href="#主要分支" class="headerlink" title="主要分支"></a>主要分支</h5><ul><li>main (线上主要分支)</li><li>develop (测试分支)</li><li>feature (开发分支)</li></ul><hr><h4 id="情况1：feature分支合并到develop分支"><a href="#情况1：feature分支合并到develop分支" class="headerlink" title="情况1：feature分支合并到develop分支"></a>情况1：feature分支合并到develop分支</h4><ul><li>可以直接在feature上进行bugfix然后重新合并到develop分支</li><li>也可以参考下面的revert方法</li></ul><h4 id="情况2：feature分支合并到了main分支（上线完成）-发现feature分支存在bug需要回滚代码"><a href="#情况2：feature分支合并到了main分支（上线完成）-发现feature分支存在bug需要回滚代码" class="headerlink" title="情况2：feature分支合并到了main分支（上线完成）;发现feature分支存在bug需要回滚代码"></a>情况2：feature分支合并到了main分支（上线完成）;发现feature分支存在bug需要回滚代码</h4><ul><li><p>因为featue分支是通过merge的方式合并到main分支，所以会生成一个新的<code>merge_commit_id</code></p></li><li><p>此时找到该<code>merge_commit_id</code>在gitlab上使用revert功能回退代码</p></li><li><h5 id="新建一个revert分支revert-62021261，再合并到main分支生成一个revert-62021261-merge-commit-id-（代码回滚成功）"><a href="#新建一个revert分支revert-62021261，再合并到main分支生成一个revert-62021261-merge-commit-id-（代码回滚成功）" class="headerlink" title="新建一个revert分支revert-62021261，再合并到main分支生成一个revert_62021261_merge_commit_id （代码回滚成功）"></a>新建一个revert分支<code>revert-62021261</code>，再合并到main分支生成一个<code>revert_62021261_merge_commit_id</code> （代码回滚成功）</h5><ul><li><p>恢复提交</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 切换到main</span><br><br>git checkout main<br>git pull<br><br>git <span class="hljs-built_in">log</span> // 找到revert_62021261_merge_commit_id<br>git revert -m 1 revert_62021261_merge_commit_id <span class="hljs-comment"># 由于是通过新建revert-62021261合并生成的revert提交 需要参数 -m 1 </span><br><span class="hljs-comment"># 中间可能存在冲突，解决玩冲突重新 git add . / git commit -m &#x27;ci: conflict&#x27;</span><br><br><span class="hljs-comment"># 此时已经恢复到merge_commit_id状态</span><br><br>git checkout featue<br><span class="hljs-comment"># fixbug</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;fix: bugfix&#x27;</span><br><br>git chekout main<br>git merge feature // 有冲突解决冲突<br>git push<br></code></pre></td></tr></table></figure></code></pre><blockquote><p>如果是revert的是一个合并节点<code>mgere_commit</code>，该<code>merge_commit</code>就有两个parent, revert时git无法知道是恢复到哪个分支，所以会报错<br><code>git revert -m 1 merge_commit</code><br>1代表当前分支，2代表合并过来的分支</p></blockquote></li></ul></li><li><h5 id="没有创建新的分支，直接生成了revert-commit-id（代码回滚成功）"><a href="#没有创建新的分支，直接生成了revert-commit-id（代码回滚成功）" class="headerlink" title="没有创建新的分支，直接生成了revert_commit_id（代码回滚成功）"></a>没有创建新的分支，直接生成了revert_commit_id（代码回滚成功）</h5><ul><li><p>恢复提交（使用main分支）</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 切换到main</span><br><br>git checkout main<br>git pull<br><br>git <span class="hljs-built_in">log</span> <span class="hljs-comment"># 找到revert_commit_id</span><br>git revert revert_commit_id <span class="hljs-comment"># 相比较生成新分支的megre不需要 -m 1</span><br><span class="hljs-comment"># 中间可能存在冲突，解决玩冲突重新 git add . / git commit -m &#x27;ci: conflict&#x27;</span><br><br><span class="hljs-comment"># 此时已经恢复到merge_commit_id状态</span><br><br>git checkout featue<br><span class="hljs-comment"># fixbug</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;fix: bugfix&#x27;</span><br><br>git chekout main<br>git merge feature <span class="hljs-comment"># 有冲突解决冲突</span><br>git push<br></code></pre></td></tr></table></figure></code></pre></li><li><p>恢复提交（使用feature分支）</p><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 本地</span><br>git checkout main<br>git pull<br><br>git chekout feature<br>git merge main<br>git <span class="hljs-built_in">log</span> <span class="hljs-comment"># 找到revert_commit_id</span><br><br>git revert revert_commit_id<br><span class="hljs-comment"># 恢复到了原来的状态</span><br><br><span class="hljs-comment"># fixbug</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;fix: bugfix&#x27;</span><br>git push<br><br></code></pre></td></tr></table></figure>再次merge到main分支就可以了</code></pre></li></ul></li><li><h5 id="直接在gitlab操作"><a href="#直接在gitlab操作" class="headerlink" title="直接在gitlab操作"></a>直接在gitlab操作</h5><p>  1.找到<code>merge_commit_id</code>使用revert回滚代码（不要使用新建<code>revert-828929292</code>分支的方式）生成一个先的<code>revert_commit_id</code>（回滚成功)</p><p>  2.要想恢复之前的提交 找到<code>revert_commit_id</code>的提交，使用revert回滚代码（不使用新建<code>revert-12773612</code>分支的方式）生成一个<code>revert_revert_commit_id</code> （恢复成功）</p></li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://juejin.cn/post/6844903647390744589">git如何回滚一次错误的操作</a></li><li><a href="https://juejin.cn/post/6856039543628693517">代码被revert,你pull了master,代码没了,咋找回来?</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 代码回滚的几种方案</title>
    <link href="/2021/12/02/Git/git%20%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/"/>
    <url>/2021/12/02/Git/git%20%E4%BB%A3%E7%A0%81%E5%9B%9E%E6%BB%9A%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="git-代码回滚的几种方案"><a href="#git-代码回滚的几种方案" class="headerlink" title="git 代码回滚的几种方案"></a>git 代码回滚的几种方案</h2><h3 id="git-reset-–hard-commit-id1-加-git-cherry-pick-commit-id2-commit-id3"><a href="#git-reset-–hard-commit-id1-加-git-cherry-pick-commit-id2-commit-id3" class="headerlink" title="git reset –hard commit_id1 加 git cherry-pick commit_id2 commit_id3"></a>git reset –hard commit_id1 加 git cherry-pick commit_id2 commit_id3</h3><p>a -&gt; b -&gt; c -&gt; d</p><p>要删除b的提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">1、git reset --hard a <span class="hljs-comment">#回退到出错版本前一个commit</span><br><br>2、git cherry-pick c, d <span class="hljs-comment">#将某次commit的更改应用到当前版本(将出错 cmmit 之后别人提交的代码合并到当前正常代码分支上)</span><br><br>3、git push origin HEAD --force  <span class="hljs-comment">#强制提交</span><br></code></pre></td></tr></table></figure><h4 id="最好不要使用在远端代码"><a href="#最好不要使用在远端代码" class="headerlink" title="最好不要使用在远端代码"></a>最好不要使用在远端代码</h4><h3 id="git-rebase-i-commit-id"><a href="#git-rebase-i-commit-id" class="headerlink" title="git rebase -i commit_id"></a>git rebase -i commit_id</h3><p>a_commit -&gt; b_commit -&gt; c_commit -&gt; d_commit</p><p>想要删除b提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase -i a_commit<br></code></pre></td></tr></table></figure><p>进入到交互模式，会有类似这样的列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">pick a_commit<br>pick b_commit<br>pick c_commit<br>pick d_commit<br></code></pre></td></tr></table></figure><p>按 i 进入可编辑模式</p><p>把b_commit前面的pick改为drop或者d(pick代表保留，drop代表丢弃这个commit)</p><p><code>esc</code></p><p><code>shift</code> + <code>:</code></p><p>输入<code>wq</code> 保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 有冲突解决冲突 </span><br><span class="hljs-comment"># 解决完冲突之后</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;chore: rebase&#x27;</span><br><br><span class="hljs-comment"># 可能会解决多次冲突</span><br><span class="hljs-comment"># 解决完之后使用 git rebase --continue</span><br><br>git rebase --<span class="hljs-built_in">continue</span><br><br><span class="hljs-comment"># 如果没有冲突 会直接成功</span><br></code></pre></td></tr></table></figure><p>最后查看<code>git log</code>会发现在 a_commit后面生成了一个新的提交</p><h3 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h3><p>参考另一篇文章 git revert</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 工作中解决分支合并冲突</title>
    <link href="/2021/12/02/Git/git%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/12/02/Git/git%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h2 id="feature分支开发，合并时解决冲突-防止污染分支代码或者线上代码"><a href="#feature分支开发，合并时解决冲突-防止污染分支代码或者线上代码" class="headerlink" title="feature分支开发，合并时解决冲突(防止污染分支代码或者线上代码)"></a>feature分支开发，合并时解决冲突(防止污染分支代码或者线上代码)</h2><ul><li><p>fearure分支merge到develop分支冲突</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 本地操作</span><br>git checkout develop<br>git pull <span class="hljs-comment">## 最新代码</span><br><br>git merge feature<br><span class="hljs-comment">## 解决冲突</span><br><span class="hljs-comment">#...</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;ci: 解决冲突&#x27;</span><br>git push<br></code></pre></td></tr></table></figure></li><li><p>feature分支merge到master分支冲突</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 本地操作</span><br>git checkout online<br>git pull <span class="hljs-comment">## 最新代码</span><br><br>git checkout feature <span class="hljs-comment"># 切到开发分支</span><br>git merge master<br><span class="hljs-comment">## 解决冲突</span><br><span class="hljs-comment">#...</span><br>git add .<br>git commit -m <span class="hljs-string">&#x27;ci: 解决冲突&#x27;</span><br>git push<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git操作</title>
    <link href="/2021/12/02/Git/git%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/12/02/Git/git%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h2><ul><li><p>查看所有分支<br><code>git branch -a</code></p></li><li><p>查看远程分支<br><code>git branch -r</code></p></li><li><p>查看本地分支所关联的远程分支<br><code>git branch -vv</code></p></li><li><p>gitk 查看分支情况 会打卡GUI界面<br><code>gitk</code></p></li></ul><h3 id="修改上次提交描述"><a href="#修改上次提交描述" class="headerlink" title="修改上次提交描述"></a>修改上次提交描述</h3><p><code>git commit --amend</code></p><h3 id="git修改本地和远程分支名称"><a href="#git修改本地和远程分支名称" class="headerlink" title="git修改本地和远程分支名称"></a>git修改本地和远程分支名称</h3><ol><li>方法一</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 本地分支重命名</span><br>git branch -m oldName newName<br><br><span class="hljs-comment"># 将重命名后的分支推送到远程</span><br>git push origin newName<br><span class="hljs-comment"># 注意： 把origin改为自己的名称（一般默认就为origin）</span><br><span class="hljs-comment">## 或者git push --set-upstream origin newName # 或者git push -u origin newName</span><br><br><span class="hljs-comment"># 删除远程的旧分支</span><br>git push origin :oldName<br><span class="hljs-comment"># 或者 git push --delete origin oldName</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>方法2</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 需要使用高版本的git</span><br>git branch -M newName <br></code></pre></td></tr></table></figure><blockquote><p>参考： <a href="https://blog.csdn.net/zhangxiaoyang0/article/details/82454209">git 修改本地和远程分支名称</a><br>参考： <a href="https://juejin.cn/post/6893041983674122254">Git分支重命名</a></p></blockquote><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><ul><li>.gitignore不生效</li></ul><p><code>git rm -f -r --cached .</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://git-scm.com/book/zh/v2">git</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>科学上网</title>
    <link href="/2021/12/02/%E6%8A%80%E6%9C%AF/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <url>/2021/12/02/%E6%8A%80%E6%9C%AF/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<h2 id="windows服务器搭建ss"><a href="#windows服务器搭建ss" class="headerlink" title="windows服务器搭建ss"></a>windows服务器搭建ss</h2><p>最近朋友买了windows服务器，帮忙搭了个ss</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><p><a href="http://1.73207.com/20191021/%E5%9C%A8windows%E4%B8%8B%E6%90%AD%E5%BB%BAshadowsockspython%E6%9C%8D%E5%8A%A1%E5%99%A8/">在Windows下搭建Shadowsocks(Python)服务器</a></p></li><li><p><a href="https://www.sockscap64.com/forums/topic/%E5%9C%A8windows%E4%B8%8A%E6%90%AD%E5%BB%BA-shadowsocks%E6%9C%8D%E5%8A%A1%E7%AB%AF/">在Windows上搭建 Shadowsocks服务端</a></p></li><li><p><a href="https://www.cnblogs.com/crwy/p/10392502.html">SSR配置：记录所踩过的坑</a></p></li><li><p><a href="https://liqiang.io/post/aes-256-gcm-not-supported-solution-50fd04e3">aes-256-gcm not supported</a></p></li><li><p><a href="https://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&tid=188059">求教如何让ss客户端支持aes-256-gcm加密方式</a></p></li><li><p><a href="https://my.oschina.net/kcw/blog/3195906">censtos 7 安装ss 支持aes-256-gcm 加密协议</a></p></li><li><p><a href="https://github.com/shadowsocks/shadowsocks/tree/master">shadowsocks</a></p></li></ol><h2 id="Ubuntu本地终端-安装shadowsocks"><a href="#Ubuntu本地终端-安装shadowsocks" class="headerlink" title="Ubuntu本地终端 安装shadowsocks"></a>Ubuntu本地终端 安装shadowsocks</h2><h3 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h3><ol><li><a href="https://www.freedidi.com/747.html">Ubuntu 安装shadowsocks</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>科学上网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github</title>
    <link href="/2021/12/02/%E6%8A%80%E6%9C%AF/github/"/>
    <url>/2021/12/02/%E6%8A%80%E6%9C%AF/github/</url>
    
    <content type="html"><![CDATA[<h2 id="github在线编辑"><a href="#github在线编辑" class="headerlink" title="github在线编辑"></a><a href="https://github.com/">github</a>在线编辑</h2><div class="note note-primary">            <p><a href="https://github.com/ElemeFE/element">https://github.com/ElemeFE/element</a> 改为 <a href="https://github.dev/ElemeFE/element">https://github.dev/ElemeFE/element</a> 即可在线查看编辑代码</p>          </div><!-- <p class="note note-info">https://github.com/ElemeFE/element 改为 https://github.dev/ElemeFE/element 即可在线查看编辑代码</p> -->]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode小技巧</title>
    <link href="/2021/12/02/%E6%8A%80%E6%9C%AF/vscode%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2021/12/02/%E6%8A%80%E6%9C%AF/vscode%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li><p>折叠展开代码</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># mac下，command + k + 0，折叠所有代码块</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 0是代码折叠级别，同理可以换用1，2，3 等</span></span><br>command + k + 0<br>command + k + 1<br>command + k + j ## 展开所有代码块<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 折叠 光标所在代码块</span></span><br>command + option + [ <br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 展开 光标所在代码块</span></span><br>command + option + ] <br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缠中说禅</title>
    <link href="/2021/12/02/%E7%BB%8F%E6%B5%8E/%E7%BC%A0%E4%B8%AD%E8%AF%B4%E7%A6%85/"/>
    <url>/2021/12/02/%E7%BB%8F%E6%B5%8E/%E7%BC%A0%E4%B8%AD%E8%AF%B4%E7%A6%85/</url>
    
    <content type="html"><![CDATA[<h3 id="缠中说禅108篇"><a href="#缠中说禅108篇" class="headerlink" title="缠中说禅108篇"></a><a href="https://moyuderen.github.io/chanzhongshuochan">缠中说禅108篇</a></h3>]]></content>
    
    
    <categories>
      
      <category>经济</category>
      
      <category>缠论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>经济</tag>
      
      <tag>缠论</tag>
      
      <tag>缠中说禅</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端面试</title>
    <link href="/2021/12/01/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/interview/"/>
    <url>/2021/12/01/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/interview/</url>
    
    <content type="html"><![CDATA[<h2 id="前端面试总结"><a href="#前端面试总结" class="headerlink" title="前端面试总结"></a><a href="https://moyuderen.github.io/interview">前端面试总结</a></h2>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客记录</title>
    <link href="/2021/12/01/%E6%9D%82%E8%AE%B0/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/12/01/%E6%9D%82%E8%AE%B0/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="Hexo官网"><a href="#Hexo官网" class="headerlink" title="Hexo官网"></a><a href="https://hexo.io/zh-cn/">Hexo官网</a></h3><ol><li>按照文档操作即可 (生成一个blog工程)</li></ol><h3 id="github"><a href="#github" class="headerlink" title="github"></a><a href="https://github.com/">github</a></h3><ol><li>注册一个github账号（大家应该人手多个了-。-|||）</li><li>创建一个新的仓库命名为<code>youUserName.github.io</code></li><li>把blog工程和<code>youUserName.github.io</code>远端仓库关联</li></ol><h3 id="困局，更改了md页面无法自动刷新"><a href="#困局，更改了md页面无法自动刷新" class="headerlink" title="困局，更改了md页面无法自动刷新"></a>困局，更改了md页面无法自动刷新</h3><ul><li>解决方案：安装<a href="https://github.com/hexojs/hexo-browsersync">hexo-browsersync</a>插件，页面会自动刷新</li></ul><h3 id="github-pages（只有仓库是public状态才能免费使用）"><a href="#github-pages（只有仓库是public状态才能免费使用）" class="headerlink" title="github-pages（只有仓库是public状态才能免费使用）"></a>github-pages（只有仓库是public状态才能免费使用）</h3><ol><li><p>创建一个action</p></li><li><p>新建.github/workflows/build.yml文件，如下：（用于执行action）</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># This is a basic workflow to help you get started with Actions</span><br><br><span class="hljs-attr">name:</span> <span class="hljs-string">build</span><br><br><span class="hljs-comment"># Controls when the workflow will run</span><br><span class="hljs-attr">on:</span><br><span class="hljs-comment"># Triggers the workflow on push or pull request events but only for the blog branch</span><br><span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">blog</span> ]<br><span class="hljs-attr">pull_request:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">blog</span> ]<br><br><span class="hljs-comment"># Allows you to run this workflow manually from the Actions tab</span><br><span class="hljs-attr">workflow_dispatch:</span><br><br><span class="hljs-comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span><br><span class="hljs-attr">jobs:</span><br><span class="hljs-comment"># This workflow contains a single job called &quot;build&quot;</span><br><span class="hljs-attr">build-and-deploy:</span><br>    <span class="hljs-comment"># The type of runner that the job will run on</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-comment"># Steps represent a sequence of tasks that will be executed as part of the job</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">🛎️</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2.3.1</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">and</span> <span class="hljs-string">Build</span> <span class="hljs-string">🔧</span> <span class="hljs-comment"># This example project is built using npm and outputs the result to the &#x27;build&#x27; folder. Replace with the commands required to build your project, or remove this step entirely if your site is pre-built.</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm install</span><br><span class="hljs-string">        npm run build</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">🚀</span><br>        <span class="hljs-comment"># https://github.com/JamesIves/github-pages-deploy-action/tree/dev#using-an-ssh-deploy-key-</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">JamesIves/github-pages-deploy-action@4.1.5</span><br>        <span class="hljs-attr">with:</span><br>        <span class="hljs-comment"># https://github.com/JamesIves/github-pages-deploy-action/discussions/627</span><br>        <span class="hljs-comment"># token: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</span><br>        <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span> <span class="hljs-comment"># The branch the action should deploy to.</span><br>        <span class="hljs-attr">folder:</span> <span class="hljs-string">public</span> <span class="hljs-comment"># The folder the action should deploy.</span><br>        <span class="hljs-attr">commit-message:</span> <span class="hljs-string">docs</span> <span class="hljs-string">更新文档</span> <br>        <span class="hljs-attr">clean:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>执行在blog(或者任意分支)执行action；如图</p><p> <img src="github-actions.png" alt="build"></p></li><li><p>action构建完成会自动生成gh-pages分支，并且把构建结果提交到该分支</p></li><li><p>进入<code>Settings</code>页面，找到<code>Pages</code>选项，完成以下设置</p><p> <img src="github-pages.png" alt="github-pages"><br> 把<code>gh-pages</code>跟目录下的打包结果作为页面展示</p></li><li><p>稍等一会github就可以用<code>https://yourUserName.github.io</code>展示</p></li></ol><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><ol><li><p>购买一个域名（我用的阿里云，买最便宜的域名）</p></li><li><p>设置解析域名如下：</p><p> <img src="domain.png" alt="域名配置"></p><ul><li>A 对应ip是通过  <code>ping yourUserName.github.io</code> 获得的 ipv4</li><li>CNAME  对应 <code>yourUserName.github.io</code></li></ul></li><li><p>进入github <code>yourUserName.github.io</code>工程 <code>Settings</code>页面，找到<code>Pages</code>选项</p><p> <img src="custom-domain.png" alt="custom-domain"></p><ul><li>等待一会就可以在自己的域名访问了</li><li>配置好之后github会在<code>gh-pages</code>分支下自动生成CNAME文件（<code>moyuderen.fun</code>）</li><li>该工程配置好之后，别的工程路由无需配置就可自动访问 eg: <code>https://moyuderen.fun/chanzhongshuochan</code></li></ul></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><h4 id="该博客使用的是fluid主题"><a href="#该博客使用的是fluid主题" class="headerlink" title="该博客使用的是fluid主题"></a>该博客使用的是<a href="https://hexo.fluid-dev.com/docs/">fluid主题</a></h4>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开通博客啦！！！</title>
    <link href="/2021/12/01/%E6%9D%82%E8%AE%B0/%E5%BC%80%E9%80%9A%E5%8D%9A%E5%AE%A2%E5%95%A6%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <url>/2021/12/01/%E6%9D%82%E8%AE%B0/%E5%BC%80%E9%80%9A%E5%8D%9A%E5%AE%A2%E5%95%A6%EF%BC%81%EF%BC%81%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h2 id="开通博客啦"><a href="#开通博客啦" class="headerlink" title="开通博客啦"></a>开通博客啦</h2><h3 id="以后可以在这里记录生活工作中的点点滴滴了，终于有了自己的小空间"><a href="#以后可以在这里记录生活工作中的点点滴滴了，终于有了自己的小空间" class="headerlink" title="以后可以在这里记录生活工作中的点点滴滴了，终于有了自己的小空间"></a>以后可以在这里记录生活工作中的点点滴滴了，终于有了自己的小空间</h3><h3 id="来自于"><a href="#来自于" class="headerlink" title="来自于"></a>来自于</h3><ol><li>使用<a href="https://hexo.io/">Hexo</a>和github-pages搭建</li><li>主题使用<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>主题，</li></ol>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂记</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git 修改已提交的 commit 信息，包括作者、邮箱</title>
    <link href="/2021/05/06/Git/git%20%E4%BF%AE%E6%94%B9%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%20commit%20%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%8C%85%E6%8B%AC%E4%BD%9C%E8%80%85%E3%80%81%E9%82%AE%E7%AE%B1/"/>
    <url>/2021/05/06/Git/git%20%E4%BF%AE%E6%94%B9%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%20commit%20%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%8C%85%E6%8B%AC%E4%BD%9C%E8%80%85%E3%80%81%E9%82%AE%E7%AE%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>不同电脑配置了不同的用户名、邮箱，例如：不小心用公司电脑提交了 commit 到个人的github 仓库，想改掉已经提交的 commit 的信息。</p><h2 id="修改用户名、邮箱"><a href="#修改用户名、邮箱" class="headerlink" title="修改用户名、邮箱"></a>修改用户名、邮箱</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 全局修改</span><br>git config --global user.name <span class="hljs-string">&quot;moyuderen&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;moyuderen@gmail.com&quot;</span><br><br><span class="hljs-comment"># 针对某个仓库修改</span><br>git config user.name <span class="hljs-string">&quot;moyuderen&quot;</span><br>git config user.email <span class="hljs-string">&quot;moyuderen@gmail.com&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>只对修改之后的提交有效</p></blockquote><h2 id="修改-commit-信息，包括作者、邮箱"><a href="#修改-commit-信息，包括作者、邮箱" class="headerlink" title="修改 commit 信息，包括作者、邮箱"></a>修改 commit 信息，包括作者、邮箱</h2><h3 id="修改最后一次-commit-的信息"><a href="#修改最后一次-commit-的信息" class="headerlink" title="修改最后一次 commit 的信息"></a>修改最后一次 commit 的信息</h3><ol><li>修改 commit 注释信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit --amend<br></code></pre></td></tr></table></figure><p>出现修改注释信息的界面， 输入 i 进入修改模式，修改好注释后，按 Esc 键 退出编辑模式，输入 :wq 保存并退出。<br>注：注释信息一般显示在第一行，窗口下面第一个字符是 # 的内容不需要修改</p><ol start="2"><li>修改作者、邮箱</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit --amend --author=<span class="hljs-string">&quot;&#123;username&#125; &lt;&#123;email&#125;&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>例如：<code>git commit --amend --author=&quot;moyuderen &lt;moyuderen@gmail.com&gt;&quot;</code></p><h3 id="修改某几次-commit-的信息"><a href="#修改某几次-commit-的信息" class="headerlink" title="修改某几次 commit 的信息"></a>修改某几次 commit 的信息</h3><ol><li><p>查看提交记录<code>git log</code></p></li><li><p>rebase</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase -i HEAD~2<br><span class="hljs-comment"># 或者</span><br>git rebase -i &#123;commitID&#125;<br><br><span class="hljs-comment"># 如果是修改所有</span><br>git rebase -i --root<br></code></pre></td></tr></table></figure><p>执行 rebase 命令后，会出现 reabse 的编辑窗口，窗口底下会有提示怎么操作。</p><p>这里把需要修改的 commit 最前面的 pick 改为 edit，可以一条或者多条。:wq保存退出会出现下面的命令提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Stop at 88921h...<br><br>You can amend the commit now, with<br><br>    git commit --amend<br><br>Once you are satisfied with your changes, run<br><br>    git rebase --<span class="hljs-built_in">continue</span><br></code></pre></td></tr></table></figure><p>根据提示，接下来同样使用 –amend 进行修改</p><h4 id="修改-commit-信息"><a href="#修改-commit-信息" class="headerlink" title="修改 commit 信息"></a>修改 commit 信息</h4><ul><li>只修改注释信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit --amend<br></code></pre></td></tr></table></figure><ul><li>只修改作者、邮箱</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit --amend --author=<span class="hljs-string">&quot;&#123;username&#125; &lt;&#123;email&#125;&gt;&quot;</span> --no-edit<br></code></pre></td></tr></table></figure><ul><li>同时修改注释信息、作者、邮箱</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit --amend --author=<span class="hljs-string">&quot;&#123;username&#125; &lt;&#123;email&#125;&gt;&quot;</span><br></code></pre></td></tr></table></figure><ul><li>修改完成后，继续执行下面命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase --<span class="hljs-built_in">continue</span><br></code></pre></td></tr></table></figure><p>如果是修改多条的话，重复以上操作即可。</p><p>直到出现以下提示，说明全部修改已经完成。</p><p>Successfully rebased and updated refs/heads/master.</p><ul><li>强制push</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push --force origin master<br></code></pre></td></tr></table></figure><blockquote><p>注：当仓库是多人操作时，可能会覆盖别人push 的代码，请谨慎操作。</p></blockquote><h3 id="使用脚本批量修改"><a href="#使用脚本批量修改" class="headerlink" title="使用脚本批量修改"></a>使用脚本批量修改</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2">重写历史</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
